{"version":3,"file":"static/js/870.59a7795a.chunk.js","mappings":"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","sources":["hooks/usePlayer.js","pages/Watch.js","stores/playerSlice.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { TMDB_API_URL, TMDB_OPTIONS } from \"../services/tmdb\";\nimport { setPlayer } from '../stores/playerSlice';\n\nconst usePlayer = (endpoint, playerState, contentId) => {\n  const dispatch = useDispatch();\n  const fetchData = async () => {\n    try {\n      // Fetch data for {videoState}\n      const response = await fetch(`${TMDB_API_URL}/${endpoint}/${contentId}?language=en-US`, TMDB_OPTIONS);\n      const media = await response.json();\n      if (!media) return null;\n\n      const { success, status_message } = await media;\n\n      if (success === false) return status_message;\n\n      // Fetch videos for media.id\n      const videoResponse = await fetch(`${TMDB_API_URL}/movie/${media.id}/videos?language=en-US&page=1`, TMDB_OPTIONS);\n      const videoResult = await videoResponse.json();\n\n      const mediaResult = {\n        info: media,\n        videos: videoResult\n      }\n      dispatch(setPlayer({ playerState, playerData: mediaResult }))\n      return mediaResult;\n    } catch (error) {\n      console.error('Error fetching movies:', error);\n    }\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, [])\n}\n\nexport default usePlayer;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { Link, useParams } from \"react-router-dom\";\nimport usePlayer from \"../hooks/usePlayer\";\nimport { TMDB_CDN_URL } from \"../services/tmdb\";\nimport { PAGE } from \"../router/routes\";\nimport { useEffect } from \"react\";\nimport { setPlayer } from \"../stores/playerSlice\";\nimport Spinner from '../components/Spinner';\n\nconst Watch = () => {\n  const { contentId } = useParams();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    return () => {\n      dispatch(setPlayer({ playerState: 'playing', playerData: null }))\n    }\n  }, [])\n\n  usePlayer('movie', 'playing', contentId);\n\n  const videoInfo = useSelector((store) => store?.player?.playing?.info)\n  const videos = useSelector((store) => store?.player?.playing?.videos)\n\n  if (!videoInfo && !videos) return <Spinner />;\n  const { original_title, backdrop_path } = videoInfo;\n\n  if (videos?.results?.length <= 0) return <VideoNotFound data={{ original_title, backdrop_path }} />;\n\n  const { key } = videos.results[0];\n  if (!key) return;\n\n  return (\n    <div className=\"h-screen w-screen\">\n      <iframe className=\"h-[416px] md:h-[calc(100%-0px)] w-full pt-[118px] md:pt-[70px]\"\n        src={`https://www.youtube.com/embed/${key}?autoplay=1&mute=0&controls=1&showinfo=0&rel=0&iv_load_policy=3&modestbranding=0`}\n        title=\"YouTube video player\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n        allowFullScreen>\n      </iframe>\n    </div>\n  )\n}\n\nconst VideoNotFound = ({ data }) => {\n  const { backdrop_path, original_title, message } = data;\n  return (\n    <div className='w-screen h-screen'>\n      <div className='w-full h-full'>\n        <img src={`${TMDB_CDN_URL}/w500${backdrop_path}`} alt={original_title} className='w-full h-full object-cover' />\n      </div>\n      <div className='absolute w-full h-full bg-black/70 top-0 bottom-0 left-0 right-0 flex flex-col justify-center items-center'>\n        <h1 className='text-white text-5xl text-bold mb-5'>{original_title}</h1>\n        <p className=' text-gray-300 text-2xl mb-4'>Video not available for <b>{original_title}</b></p>\n        <Link to={PAGE.BROWSE} className=\"bg-red-primary px-12 py-3 text-white rounded flex items-center gap-3\">\n          <span className=\"icon-fill text-[36px]\">west</span>\n          <span>Home Page</span>\n        </Link>\n      </div>\n    </div>\n  )\n}\n\nexport default Watch;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst playerSlice = createSlice({\n  name: 'player',\n  initialState: {\n    playing: null\n  },\n\n  reducers: {\n    setPlayer: (state, action) => {\n      const { playerState, playerData } = action.payload;\n      state[playerState] = playerData;\n    }\n  }\n});\n\nexport const { setPlayer } = playerSlice.actions;\nexport default playerSlice.reducer;\n"],"names":["endpoint","playerState","contentId","_ref","dispatch","useDispatch","useEffect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","media","_yield$media","success","status_message","videoResponse","videoResult","mediaResult","wrap","_context","prev","next","fetch","concat","TMDB_API_URL","TMDB_OPTIONS","sent","json","abrupt","id","info","videos","setPlayer","playerData","t0","console","error","stop","apply","arguments","fetchData","VideoNotFound","data","backdrop_path","original_title","message","_jsxs","className","children","_jsx","src","TMDB_CDN_URL","alt","Link","to","PAGE","BROWSE","_videos$results","useParams","usePlayer","videoInfo","useSelector","store","_store$player","_store$player$playing","player","playing","_store$player2","_store$player2$playin","Spinner","results","length","key","title","allow","allowFullScreen","playerSlice","createSlice","name","initialState","reducers","state","action","_action$payload","payload","actions"],"sourceRoot":""}