{"version":3,"file":"static/js/291.a2f82206.chunk.js","mappings":"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","sources":["hooks/useTrending.js","pages/Browse.js","stores/trendingSlice.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TMDB_API_URL, TMDB_OPTIONS } from \"../services/tmdb\";\nimport { setTrending } from '../stores/trendingSlice';\n\nconst useTrending = (endpoint, trendingType, genreId, originalLanguage) => {\n  const dispatch = useDispatch();\n  const trendingData = useSelector((store) => store.trendings[trendingType]);\n  const fetchData = async () => {\n    try {\n      let apiUrl = `${TMDB_API_URL}/trending/${endpoint}?language=en-US`;\n\n      if (genreId) {\n        apiUrl += `&with_genres=${genreId}`;\n      }\n\n      if (originalLanguage) {\n        apiUrl += `&with_original_language=${originalLanguage}`;\n      }\n      const response = await fetch(apiUrl, TMDB_OPTIONS);\n      const result = await response.json();\n      dispatch(setTrending({ trendingType, trendingData: result }))\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n\n  useEffect(() => {\n    !trendingData && fetchData()\n  }, [dispatch, trendingData])\n}\n\nexport default useTrending;\n","import Showcase from '../components/Showcase';\nimport MovieSlider from '../components/MovieSlider';\nimport useMovie from '../hooks/useMovie';\nimport useTrending from '../hooks/useTrending';\nimport { SHOWCASE, TRENDINGS, MOVIES } from '../services/tmdb';\nimport { useSelector } from 'react-redux';\nimport useShowCase from '../hooks/useShowCase';\nimport ShowcaseShimmer from '../components/ShowcaseShimmer';\nimport MovieSliderShimmer from '../components/MovieSliderShimmer';\n\nconst Browse = () => {\n  const { landingPage } = SHOWCASE;\n  const { trendingAll, trendingTv, trendingMovies } = TRENDINGS;\n  const { nowPlaying, popular, topRated } = MOVIES;\n\n  /**\n   * Fetch data using below custom hooks, and set to Redux Store\n   * @useShowCase \n   * @useTrending \n   * @useMovies \n   */\n\n  useShowCase(landingPage.endpoint, landingPage.type, null, 'en', 19);\n\n  useTrending(trendingAll.endpoint, trendingAll.type);\n  useTrending(trendingTv.endpoint, trendingTv.type);\n  useTrending(trendingMovies.endpoint, trendingMovies.type);\n\n  useMovie(nowPlaying.endpoint, nowPlaying.type);\n  useMovie(topRated.endpoint, topRated.type);\n  useMovie(popular.endpoint, popular.type);\n  useMovie(popular.endpoint, 'bollywood', null, 'hi');\n\n  /**\n   * Receive data from Redux Store\n   * @useShowCase\n   * @useTrending \n   * @useMovies \n   */\n\n  const showCase = useSelector((store) => store?.showCase?.landingPage);\n  const trendings = useSelector((store) => store?.trendings);\n  const movies = useSelector((store) => store?.movies);\n\n  return (\n    <div className='broswe-page'>\n      {showCase ? <Showcase data={showCase} /> : <ShowcaseShimmer />}\n      <div className='moview-by-type px-4 md:px-12 md:mt-[-10%] xl:mt-[-15%] z-50 relative'>\n        {\n          movies.nowPlaying ? (\n            <MovieSlider type={null} heading=\"Now Playing\" data={movies.nowPlaying} />\n          ) : (\n            <MovieSliderShimmer dimention={'w-28 md:w-36'} />\n          )\n        }\n\n        {\n          trendings.trendingMovies ? (\n            <MovieSlider\n              type=\"trending\"\n              heading=\"Top 10 Trending Movies\"\n              data={trendings.trendingMovies}\n            />\n          ) : (\n            <MovieSliderShimmer dimention={'w-52 h-[200px]'} />\n          )\n        }\n\n        {\n          movies.bollywood ? (\n            <MovieSlider type={null} heading=\"Now Playing Bollywood Movies\" data={movies.bollywood} />\n          ) : (\n            <MovieSliderShimmer dimention={'w-28 md:w-36'} />\n          )\n        }\n\n        {\n          movies.topRated ? (\n            <MovieSlider type={null} heading=\"Top Rated Movies\" data={movies.topRated} />\n          ) : (\n            <MovieSliderShimmer dimention={'w-28 md:w-36'} />\n          )\n        }\n\n        {\n          trendings.trendingTv ? (\n            <MovieSlider type=\"trending\" heading=\"Top 10 TV Shows in India\" data={trendings.trendingTv} />\n          ) : (\n            <MovieSliderShimmer dimention={'w-52 h-[200px]'} />\n          )\n        }\n\n        {\n          movies.popular ? (\n            <MovieSlider type={null} heading=\"Popular Movies\" data={movies.popular} />\n          ) : (\n            <MovieSliderShimmer dimention={'w-28 md:w-36'} />\n          )\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Browse;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst trandingSlice = createSlice({\n  name: 'trendings',\n  initialState: {\n    trendingAll: null,\n    trendingMovies: null,\n    trendingTv: null,\n    trendingIndia: null,\n  },\n  reducers: {\n    setTrending: (state, action) => {\n      const { trendingType, trendingData } = action.payload;\n      const filterTopTen = {\n        page: trendingData.page,\n        results: trendingData.results.slice(0, 10)\n      }\n      state[trendingType] = filterTopTen;\n    }\n  }\n});\n\n\nexport const { setTrending } = trandingSlice.actions;\nexport default trandingSlice.reducer;\n"],"names":["endpoint","trendingType","genreId","originalLanguage","_ref","dispatch","useDispatch","trendingData","useSelector","store","trendings","useEffect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","apiUrl","response","result","wrap","_context","prev","next","concat","TMDB_API_URL","fetch","TMDB_OPTIONS","sent","json","setTrending","t0","console","error","stop","apply","arguments","fetchData","landingPage","SHOWCASE","trendingAll","TRENDINGS","trendingTv","trendingMovies","nowPlaying","MOVIES","popular","topRated","useShowCase","type","useTrending","useMovie","showCase","_store$showCase","movies","_jsxs","className","children","_jsx","Showcase","data","ShowcaseShimmer","MovieSlider","heading","MovieSliderShimmer","dimention","bollywood","trandingSlice","createSlice","name","initialState","trendingIndia","reducers","state","action","_action$payload","payload","filterTopTen","page","results","slice","actions"],"sourceRoot":""}