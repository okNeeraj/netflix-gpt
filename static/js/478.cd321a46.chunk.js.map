{"version":3,"file":"static/js/478.cd321a46.chunk.js","mappings":"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","sources":["components/SearchResult.js","services/openai.js","components/GptSearchBar.js","pages/Search.js","stores/searchSlice.js"],"sourcesContent":["import { useSelector } from \"react-redux\";\nimport MovieSlider from \"./MovieSlider\";\n\nconst SearchResult = () => {\n  const { gptResults, movies } = useSelector((store) => store.search);\n  if (!gptResults) return null;\n\n  return (\n    <>\n      {/* <MovieSlider heading={searchTerm} data={movies} /> */}\n      {gptResults.map((title, index) => <MovieSlider key={title} heading={title} data={movies[index]} />)}\n    </>\n  )\n}\n\nexport default SearchResult\n","import OpenAI from \"openai\";\n\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_KEY,\n  dangerouslyAllowBrowser: true\n});\n\nexport default openai;\n","import { useState } from \"react\"\nimport openai from \"../services/openai\";\nimport { TMDB_API_URL, TMDB_OPTIONS } from \"../services/tmdb\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setGptSearch } from \"../stores/searchSlice\";\nimport SearchOutlinedIcon from '@mui/icons-material/SearchOutlined';\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst GptSearchBar = ({ searchOpacity }) => {\n  const userEmail = useSelector((store) => store?.user?.email);\n  const [user, setUser] = useState(userEmail)\n  const [loadingBtn, setLoadingBtn] = useState(false);\n  const [searchPrompt, setSearchPrompt] = useState('');\n  const dispatch = useDispatch();\n\n  const handlePrompt = (event) => {\n    setSearchPrompt(event.target.value)\n  }\n\n  const handleClearPrompt = () => {\n    setSearchPrompt('')\n  }\n\n  const searchMovies = async (endpoint, query) => {\n    try {\n      const response = await fetch(`${TMDB_API_URL}/search/${endpoint}?query=${query}&language=en-US&page=1`, TMDB_OPTIONS);\n      const results = await response.json();\n      return results;\n    } catch (error) {\n      console.error('Error fetching movies:', error);\n    }\n  }\n\n  const handleSearch = async () => {\n    setLoadingBtn(true);\n    if (user === 'gpt@gmail.com') {\n      try {\n        const prompt = `\n        Act as a movie recommendation system and suggest some movies for the query : ${searchPrompt}.\n        Only give me name of 5 movies with comma seperated.\n        result should always look like - Spider Man, Elemental, Phir Hera Pheri\n      `\n        const gptResponse = await openai.chat.completions.create({\n          messages: [{ role: 'user', content: prompt }],\n          model: 'gpt-3.5-turbo',\n        });\n\n        const gptResults = gptResponse?.choices[0]?.message?.content.split(\", \")\n        const data = gptResults.map((query) => searchMovies('movie', query));\n        const searchResults = await Promise.all(data);\n\n        if (searchResults) {\n          setLoadingBtn(false)\n        }\n\n        dispatch(setGptSearch({ searchResults: gptResults, actionType: 'gptResults' }))\n        dispatch(setGptSearch({ searchResults: searchResults, actionType: 'movies' }))\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    } else { // GPT will not work for all user\n      const searchTerm = [searchPrompt];\n      const data = searchTerm.map((query) => searchMovies('movie', query));\n      const searchResults = await Promise.all(data);\n\n      if (searchResults) {\n        setLoadingBtn(false)\n      }\n\n      dispatch(setGptSearch({ searchResults: searchTerm, actionType: 'gptResults' }))\n      dispatch(setGptSearch({ searchResults: searchResults, actionType: 'movies' }))\n    }\n  }\n\n  return (\n    <>\n      <div className=\"px-4 md:px-12 py-3 text-white max-w-4xl text-center m-auto mt-12\">\n        <h1 className=\"text-3xl md:text-5xl mb-3 font-bold\">Let AI be your Movie Guru!</h1>\n        <p className=\"text-gray-400 text-sm md:text-lg\">Discover Family-Friendly Flicks for a Perfect Movie Night</p>\n      </div>\n      <div className=\"px-4 md:px-12 py-3 sticky top-[68px] z-[99999]\" style={{ background: `rgba(20, 20, 20, ${searchOpacity})` }}>\n        <form onSubmit={(e) => e.preventDefault()}>\n          <div className=\"flex gap-1\">\n            <div className=\"text-white relative w-full\">\n              <span className='icon-fill text-gray-400 text-[22px] md:mt-0 md:text-[36px] absolute left-4 top-[16px] md:top-5 hidden md:block'>\n                <SearchOutlinedIcon style={{ fontSize: '32px' }} />\n              </span>\n              <input\n                type=\"text\"\n                placeholder=\"Search Movies, Show and more\"\n                className={`py-4 md:py-6 pl-4 pr-12 md:px-14 w-full bg-gray-600 bg-opacity-70 rounded focus:bg-opacity-100 focus-visible:outline-none text-lg`}\n                onChange={handlePrompt}\n                value={searchPrompt}\n              />\n\n              {searchPrompt && <span className='icon-fill text-[28px] mt-0 md:text-[36px] absolute right-4 top-4 md:top-5 cursor-pointer' onClick={handleClearPrompt}>\n                <CloseIcon style={{ fontSize: '32px' }} />\n              </span>}\n            </div>\n            <button\n              className={`py-4 md:py-6 w-24 px-2 md:px-5 flex items-center justify-center bg-red-primary rounded text-white disabled:bg-red-800`}\n              onClick={handleSearch}\n              disabled={searchPrompt === '' ? true : false}\n            >\n              {\n                loadingBtn ?\n                  <div className=\"w-5 h-5 border-t m border-gray-300 border-solid rounded-full animate-spin\"></div>\n                  :\n                  <>\n                    <span className='icon-fill text-[22px] md:text-[32px] md:hidden'>\n                      <SearchOutlinedIcon style={{ fontSize: '28px' }} />\n                    </span>\n                    <span className='hidden md:inline-block'>Search</span>\n                  </>\n              }\n            </button>\n          </div>\n          <p className='text-xs mt-1'>\n            Note: Movie recommendations powered by GPT are available on request due to paid APIs.\n            <a href=\"https://www.linkedin.com/in/okneerajsingh/\" target=\"_blank\" rel=\"noreferrer\" className='ml-2 text-sm text-gray-400 hover:text-gray-200'>Request now</a>\n          </p>\n        </form>\n      </div>\n    </>\n  )\n}\n\nexport default GptSearchBar\n","import SearchResult from \"../components/SearchResult\";\nimport { useEffect, useState } from \"react\";\nimport GptSearchBar from \"../components/GptSearchBar\";\n\nconst Search = () => {\n  const [skinOpacity, setSkinOpacity] = useState(1);\n  const [searchOpacity, setSearchOpacity] = useState(0);\n\n  const handleScroll = () => {\n    const scrollPosition = window.scrollY;\n    const threshold = 70;\n\n    if (scrollPosition < threshold) {\n      setSkinOpacity(1 - scrollPosition / threshold);\n    } else {\n      setSkinOpacity(0);\n    }\n\n    if (skinOpacity === 0) {\n      setSearchOpacity(1);\n    } else {\n      setSearchOpacity(0);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, [skinOpacity]);\n\n  return (\n    <div className=\"search-page\">\n      <div className={`bg-skin w-full h-[430px] absolute top-0 -z-0 bg-gradient-to-b from-indigo-800 to-[#141414] transition-colors`} style={{ opacity: `${skinOpacity}` }}></div>\n      <div className=\"search relative\">\n        <GptSearchBar searchOpacity={searchOpacity} />\n        <div className=\"mt-3 px-4 md:px-12 py-3 min-h-[700px]\">\n          <SearchResult />\n        </div>\n      </div>\n    </div>\n\n  )\n}\n\nexport default Search;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst searchSlice = createSlice({\n  name: 'search',\n  initialState: {\n    gptResults: null,\n    movies: null,\n    shows: null,\n  },\n  reducers: {\n    setGptSearch: (state, action) => {\n      const { actionType, searchResults } = action.payload\n      state[actionType] = searchResults;\n    }\n  }\n});\n\nexport const { setGptSearch } = searchSlice.actions;\nexport default searchSlice.reducer;\n"],"names":["_useSelector","useSelector","store","search","gptResults","movies","_jsx","_Fragment","children","map","title","index","MovieSlider","heading","data","OpenAI","apiKey","process","dangerouslyAllowBrowser","_ref","_ref2","_ref3","searchOpacity","userEmail","_store$user","user","email","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","loadingBtn","setLoadingBtn","_useState5","_useState6","searchPrompt","setSearchPrompt","dispatch","useDispatch","searchMovies","_x","_x2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","endpoint","query","response","results","wrap","_context","prev","next","fetch","concat","TMDB_API_URL","TMDB_OPTIONS","sent","json","abrupt","t0","console","error","stop","apply","arguments","_jsxs","className","style","background","onSubmit","e","preventDefault","SearchOutlinedIcon","fontSize","type","placeholder","onChange","event","target","value","onClick","CloseIcon","_callee2","_gptResponse$choices$","_gptResponse$choices$2","prompt","gptResponse","searchResults","searchTerm","_data","_searchResults","_context2","openai","chat","completions","create","messages","role","content","model","choices","message","split","Promise","all","setGptSearch","actionType","disabled","href","rel","skinOpacity","setSkinOpacity","setSearchOpacity","handleScroll","scrollPosition","window","scrollY","useEffect","addEventListener","removeEventListener","opacity","GptSearchBar","SearchResult","searchSlice","createSlice","name","initialState","shows","reducers","state","action","_action$payload","payload","actions"],"sourceRoot":""}