{"version":3,"file":"static/js/859.fade9dc8.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/@babel/runtime/helpers/esm/superPropBase.js","../node_modules/@babel/runtime/helpers/esm/asyncIterator.js","../node_modules/@babel/runtime/helpers/esm/OverloadYield.js","../node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js","../node_modules/@babel/runtime/helpers/esm/AsyncGenerator.js","../node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js","../node_modules/openai/src/version.ts","../node_modules/openai/src/error.ts","../node_modules/openai/src/streaming.ts","../node_modules/openai/src/_shims/registry.ts","../node_modules/openai/src/_shims/MultipartBody.ts","../node_modules/openai/_shims/index.mjs","../node_modules/openai/src/_shims/web-runtime.ts","../node_modules/openai/src/uploads.ts","../node_modules/openai/src/core.ts","../node_modules/openai/src/pagination.ts","../node_modules/openai/src/resource.ts","../node_modules/openai/src/resources/completions.ts","../node_modules/openai/src/resources/chat/completions.ts","../node_modules/openai/src/resources/chat/chat.ts","../node_modules/openai/src/resources/edits.ts","../node_modules/openai/src/resources/embeddings.ts","../node_modules/openai/src/resources/files.ts","../node_modules/openai/src/resources/images.ts","../node_modules/openai/src/resources/audio/transcriptions.ts","../node_modules/openai/src/resources/audio/translations.ts","../node_modules/openai/src/resources/audio/audio.ts","../node_modules/openai/src/resources/moderations.ts","../node_modules/openai/src/resources/models.ts","../node_modules/openai/src/resources/fine-tuning/jobs.ts","../node_modules/openai/src/resources/fine-tuning/fine-tuning.ts","../node_modules/openai/src/resources/fine-tunes.ts","../node_modules/openai/src/index.ts"],"sourcesContent":["import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}","export default function _asyncIterator(r) {\n  var n,\n    t,\n    o,\n    e = 2;\n  for (\"undefined\" != typeof Symbol && (t = Symbol.asyncIterator, o = Symbol.iterator); e--;) {\n    if (t && null != (n = r[t])) return n.call(r);\n    if (o && null != (n = r[o])) return new AsyncFromSyncIterator(n.call(r));\n    t = \"@@asyncIterator\", o = \"@@iterator\";\n  }\n  throw new TypeError(\"Object is not async iterable\");\n}\nfunction AsyncFromSyncIterator(r) {\n  function AsyncFromSyncIteratorContinuation(r) {\n    if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\"));\n    var n = r.done;\n    return Promise.resolve(r.value).then(function (r) {\n      return {\n        value: r,\n        done: n\n      };\n    });\n  }\n  return AsyncFromSyncIterator = function AsyncFromSyncIterator(r) {\n    this.s = r, this.n = r.next;\n  }, AsyncFromSyncIterator.prototype = {\n    s: null,\n    n: null,\n    next: function next() {\n      return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments));\n    },\n    \"return\": function _return(r) {\n      var n = this.s[\"return\"];\n      return void 0 === n ? Promise.resolve({\n        value: r,\n        done: !0\n      }) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments));\n    },\n    \"throw\": function _throw(r) {\n      var n = this.s[\"return\"];\n      return void 0 === n ? Promise.reject(r) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments));\n    }\n  }, new AsyncFromSyncIterator(r);\n}","export default function _OverloadYield(t, e) {\n  this.v = t, this.k = e;\n}","import OverloadYield from \"./OverloadYield.js\";\nexport default function _awaitAsyncGenerator(e) {\n  return new OverloadYield(e, 0);\n}","import OverloadYield from \"./OverloadYield.js\";\nexport default function AsyncGenerator(e) {\n  var r, t;\n  function resume(r, t) {\n    try {\n      var n = e[r](t),\n        o = n.value,\n        u = o instanceof OverloadYield;\n      Promise.resolve(u ? o.v : o).then(function (t) {\n        if (u) {\n          var i = \"return\" === r ? \"return\" : \"next\";\n          if (!o.k || t.done) return resume(i, t);\n          t = e[i](t).value;\n        }\n        settle(n.done ? \"return\" : \"normal\", t);\n      }, function (e) {\n        resume(\"throw\", e);\n      });\n    } catch (e) {\n      settle(\"throw\", e);\n    }\n  }\n  function settle(e, n) {\n    switch (e) {\n      case \"return\":\n        r.resolve({\n          value: n,\n          done: !0\n        });\n        break;\n      case \"throw\":\n        r.reject(n);\n        break;\n      default:\n        r.resolve({\n          value: n,\n          done: !1\n        });\n    }\n    (r = r.next) ? resume(r.key, r.arg) : t = null;\n  }\n  this._invoke = function (e, n) {\n    return new Promise(function (o, u) {\n      var i = {\n        key: e,\n        arg: n,\n        resolve: o,\n        reject: u,\n        next: null\n      };\n      t ? t = t.next = i : (r = t = i, resume(e, n));\n    });\n  }, \"function\" != typeof e[\"return\"] && (this[\"return\"] = void 0);\n}\nAsyncGenerator.prototype[\"function\" == typeof Symbol && Symbol.asyncIterator || \"@@asyncIterator\"] = function () {\n  return this;\n}, AsyncGenerator.prototype.next = function (e) {\n  return this._invoke(\"next\", e);\n}, AsyncGenerator.prototype[\"throw\"] = function (e) {\n  return this._invoke(\"throw\", e);\n}, AsyncGenerator.prototype[\"return\"] = function (e) {\n  return this._invoke(\"return\", e);\n};","import AsyncGenerator from \"./AsyncGenerator.js\";\nexport default function _wrapAsyncGenerator(fn) {\n  return function () {\n    return new AsyncGenerator(fn.apply(this, arguments));\n  };\n}","export const VERSION = '4.11.0'; // x-release-please-version\n","// File generated from our OpenAPI spec by Stainless.\n\nimport { castToError, Headers } from './core';\n\nexport class OpenAIError extends Error {}\n\nexport class APIError extends OpenAIError {\n  readonly status: number | undefined;\n  readonly headers: Headers | undefined;\n  readonly error: Object | undefined;\n\n  readonly code: string | null | undefined;\n  readonly param: string | null | undefined;\n  readonly type: string | undefined;\n\n  constructor(\n    status: number | undefined,\n    error: Object | undefined,\n    message: string | undefined,\n    headers: Headers | undefined,\n  ) {\n    super(`${status} ${APIError.makeMessage(error, message)}`);\n    this.status = status;\n    this.headers = headers;\n\n    const data = error as Record<string, any>;\n    this.error = data;\n    this.code = data?.['code'];\n    this.param = data?.['param'];\n    this.type = data?.['type'];\n  }\n\n  private static makeMessage(error: any, message: string | undefined) {\n    return (\n      error?.message ?\n        typeof error.message === 'string' ? error.message\n        : JSON.stringify(error.message)\n      : error ? JSON.stringify(error)\n      : message || 'status code (no body)'\n    );\n  }\n\n  static generate(\n    status: number | undefined,\n    errorResponse: Object | undefined,\n    message: string | undefined,\n    headers: Headers | undefined,\n  ) {\n    if (!status) {\n      return new APIConnectionError({ cause: castToError(errorResponse) });\n    }\n\n    const error = (errorResponse as Record<string, any>)?.['error'];\n\n    if (status === 400) {\n      return new BadRequestError(status, error, message, headers);\n    }\n\n    if (status === 401) {\n      return new AuthenticationError(status, error, message, headers);\n    }\n\n    if (status === 403) {\n      return new PermissionDeniedError(status, error, message, headers);\n    }\n\n    if (status === 404) {\n      return new NotFoundError(status, error, message, headers);\n    }\n\n    if (status === 409) {\n      return new ConflictError(status, error, message, headers);\n    }\n\n    if (status === 422) {\n      return new UnprocessableEntityError(status, error, message, headers);\n    }\n\n    if (status === 429) {\n      return new RateLimitError(status, error, message, headers);\n    }\n\n    if (status >= 500) {\n      return new InternalServerError(status, error, message, headers);\n    }\n\n    return new APIError(status, error, message, headers);\n  }\n}\n\nexport class APIUserAbortError extends APIError {\n  override readonly status: undefined = undefined;\n\n  constructor({ message }: { message?: string } = {}) {\n    super(undefined, undefined, message || 'Request was aborted.', undefined);\n  }\n}\n\nexport class APIConnectionError extends APIError {\n  override readonly status: undefined = undefined;\n\n  constructor({ message, cause }: { message?: string; cause?: Error | undefined }) {\n    super(undefined, undefined, message || 'Connection error.', undefined);\n    // in some environments the 'cause' property is already declared\n    // @ts-ignore\n    if (cause) this.cause = cause;\n  }\n}\n\nexport class APIConnectionTimeoutError extends APIConnectionError {\n  constructor({ message }: { message?: string } = {}) {\n    super({ message: message ?? 'Request timed out.' });\n  }\n}\n\nexport class BadRequestError extends APIError {\n  override readonly status: 400 = 400;\n}\n\nexport class AuthenticationError extends APIError {\n  override readonly status: 401 = 401;\n}\n\nexport class PermissionDeniedError extends APIError {\n  override readonly status: 403 = 403;\n}\n\nexport class NotFoundError extends APIError {\n  override readonly status: 404 = 404;\n}\n\nexport class ConflictError extends APIError {\n  override readonly status: 409 = 409;\n}\n\nexport class UnprocessableEntityError extends APIError {\n  override readonly status: 422 = 422;\n}\n\nexport class RateLimitError extends APIError {\n  override readonly status: 429 = 429;\n}\n\nexport class InternalServerError extends APIError {}\n","import { type Response } from './_shims/index';\nimport { OpenAIError } from './error';\n\ntype Bytes = string | ArrayBuffer | Uint8Array | Buffer | null | undefined;\n\ntype ServerSentEvent = {\n  event: string | null;\n  data: string;\n  raw: string[];\n};\n\nexport class Stream<Item> implements AsyncIterable<Item> {\n  controller: AbortController;\n\n  private response: Response;\n  private decoder: SSEDecoder;\n\n  constructor(response: Response, controller: AbortController) {\n    this.response = response;\n    this.controller = controller;\n    this.decoder = new SSEDecoder();\n  }\n\n  private async *iterMessages(): AsyncGenerator<ServerSentEvent, void, unknown> {\n    if (!this.response.body) {\n      this.controller.abort();\n      throw new OpenAIError(`Attempted to iterate over a response with no body`);\n    }\n    const lineDecoder = new LineDecoder();\n\n    const iter = readableStreamAsyncIterable<Bytes>(this.response.body);\n    for await (const chunk of iter) {\n      for (const line of lineDecoder.decode(chunk)) {\n        const sse = this.decoder.decode(line);\n        if (sse) yield sse;\n      }\n    }\n\n    for (const line of lineDecoder.flush()) {\n      const sse = this.decoder.decode(line);\n      if (sse) yield sse;\n    }\n  }\n\n  async *[Symbol.asyncIterator](): AsyncIterator<Item, any, undefined> {\n    let done = false;\n    try {\n      for await (const sse of this.iterMessages()) {\n        if (done) continue;\n\n        if (sse.data.startsWith('[DONE]')) {\n          done = true;\n          continue;\n        }\n\n        if (sse.event === null) {\n          try {\n            yield JSON.parse(sse.data);\n          } catch (e) {\n            console.error(`Could not parse message into JSON:`, sse.data);\n            console.error(`From chunk:`, sse.raw);\n            throw e;\n          }\n        }\n      }\n      done = true;\n    } catch (e) {\n      // If the user calls `stream.controller.abort()`, we should exit without throwing.\n      if (e instanceof Error && e.name === 'AbortError') return;\n      throw e;\n    } finally {\n      // If the user `break`s, abort the ongoing request.\n      if (!done) this.controller.abort();\n    }\n  }\n}\n\nclass SSEDecoder {\n  private data: string[];\n  private event: string | null;\n  private chunks: string[];\n\n  constructor() {\n    this.event = null;\n    this.data = [];\n    this.chunks = [];\n  }\n\n  decode(line: string) {\n    if (line.endsWith('\\r')) {\n      line = line.substring(0, line.length - 1);\n    }\n\n    if (!line) {\n      // empty line and we didn't previously encounter any messages\n      if (!this.event && !this.data.length) return null;\n\n      const sse: ServerSentEvent = {\n        event: this.event,\n        data: this.data.join('\\n'),\n        raw: this.chunks,\n      };\n\n      this.event = null;\n      this.data = [];\n      this.chunks = [];\n\n      return sse;\n    }\n\n    this.chunks.push(line);\n\n    if (line.startsWith(':')) {\n      return null;\n    }\n\n    let [fieldname, _, value] = partition(line, ':');\n\n    if (value.startsWith(' ')) {\n      value = value.substring(1);\n    }\n\n    if (fieldname === 'event') {\n      this.event = value;\n    } else if (fieldname === 'data') {\n      this.data.push(value);\n    }\n\n    return null;\n  }\n}\n\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */\nclass LineDecoder {\n  // prettier-ignore\n  static NEWLINE_CHARS = new Set(['\\n', '\\r', '\\x0b', '\\x0c', '\\x1c', '\\x1d', '\\x1e', '\\x85', '\\u2028', '\\u2029']);\n  static NEWLINE_REGEXP = /\\r\\n|[\\n\\r\\x0b\\x0c\\x1c\\x1d\\x1e\\x85\\u2028\\u2029]/g;\n\n  buffer: string[];\n  trailingCR: boolean;\n  textDecoder: any; // TextDecoder found in browsers; not typed to avoid pulling in either \"dom\" or \"node\" types.\n\n  constructor() {\n    this.buffer = [];\n    this.trailingCR = false;\n  }\n\n  decode(chunk: Bytes): string[] {\n    let text = this.decodeText(chunk);\n\n    if (this.trailingCR) {\n      text = '\\r' + text;\n      this.trailingCR = false;\n    }\n    if (text.endsWith('\\r')) {\n      this.trailingCR = true;\n      text = text.slice(0, -1);\n    }\n\n    if (!text) {\n      return [];\n    }\n\n    const trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || '');\n    let lines = text.split(LineDecoder.NEWLINE_REGEXP);\n\n    if (lines.length === 1 && !trailingNewline) {\n      this.buffer.push(lines[0]!);\n      return [];\n    }\n\n    if (this.buffer.length > 0) {\n      lines = [this.buffer.join('') + lines[0], ...lines.slice(1)];\n      this.buffer = [];\n    }\n\n    if (!trailingNewline) {\n      this.buffer = [lines.pop() || ''];\n    }\n\n    return lines;\n  }\n\n  decodeText(bytes: Bytes): string {\n    if (bytes == null) return '';\n    if (typeof bytes === 'string') return bytes;\n\n    // Node:\n    if (typeof Buffer !== 'undefined') {\n      if (bytes instanceof Buffer) {\n        return bytes.toString();\n      }\n      if (bytes instanceof Uint8Array) {\n        return Buffer.from(bytes).toString();\n      }\n\n      throw new OpenAIError(\n        `Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`,\n      );\n    }\n\n    // Browser\n    if (typeof TextDecoder !== 'undefined') {\n      if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n        this.textDecoder ??= new TextDecoder('utf8');\n        return this.textDecoder.decode(bytes);\n      }\n\n      throw new OpenAIError(\n        `Unexpected: received non-Uint8Array/ArrayBuffer (${\n          (bytes as any).constructor.name\n        }) in a web platform. Please report this error.`,\n      );\n    }\n\n    throw new OpenAIError(\n      `Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`,\n    );\n  }\n\n  flush(): string[] {\n    if (!this.buffer.length && !this.trailingCR) {\n      return [];\n    }\n\n    const lines = [this.buffer.join('')];\n    this.buffer = [];\n    this.trailingCR = false;\n    return lines;\n  }\n}\n\nfunction partition(str: string, delimiter: string): [string, string, string] {\n  const index = str.indexOf(delimiter);\n  if (index !== -1) {\n    return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];\n  }\n\n  return [str, '', ''];\n}\n\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nfunction readableStreamAsyncIterable<T>(stream: any): AsyncIterableIterator<T> {\n  if (stream[Symbol.asyncIterator]) return stream;\n\n  const reader = stream.getReader();\n  return {\n    async next() {\n      try {\n        const result = await reader.read();\n        if (result?.done) reader.releaseLock(); // release lock when stream becomes closed\n        return result;\n      } catch (e) {\n        reader.releaseLock(); // release lock when stream becomes errored\n        throw e;\n      }\n    },\n    async return() {\n      const cancelPromise = reader.cancel();\n      reader.releaseLock();\n      await cancelPromise;\n      return { done: true, value: undefined };\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n  };\n}\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nimport { type RequestOptions } from '../core';\n\nexport interface Shims {\n  kind: string;\n  fetch: any;\n  Request: any;\n  Response: any;\n  Headers: any;\n  FormData: any;\n  Blob: any;\n  File: any;\n  getMultipartRequestOptions: <T extends {} = Record<string, unknown>>(\n    form: Shims['FormData'],\n    opts: RequestOptions<T>,\n  ) => Promise<RequestOptions<T>>;\n  getDefaultAgent: (url: string) => any;\n  fileFromPath:\n    | ((path: string, filename?: string, options?: {}) => Promise<Shims['File']>)\n    | ((path: string, options?: {}) => Promise<Shims['File']>);\n  isFsReadStream: (value: any) => boolean;\n}\n\nexport let auto = false;\nexport let kind: Shims['kind'] | undefined = undefined;\nexport let fetch: Shims['fetch'] | undefined = undefined;\nexport let Request: Shims['Request'] | undefined = undefined;\nexport let Response: Shims['Response'] | undefined = undefined;\nexport let Headers: Shims['Headers'] | undefined = undefined;\nexport let FormData: Shims['FormData'] | undefined = undefined;\nexport let Blob: Shims['Blob'] | undefined = undefined;\nexport let File: Shims['File'] | undefined = undefined;\nexport let getMultipartRequestOptions: Shims['getMultipartRequestOptions'] | undefined = undefined;\nexport let getDefaultAgent: Shims['getDefaultAgent'] | undefined = undefined;\nexport let fileFromPath: Shims['fileFromPath'] | undefined = undefined;\nexport let isFsReadStream: Shims['isFsReadStream'] | undefined = undefined;\n\nexport function setShims(shims: Shims, options: { auto: boolean } = { auto: false }) {\n  if (auto) {\n    throw new Error(\n      `you must \\`import 'openai/shims/${shims.kind}'\\` before importing anything else from openai`,\n    );\n  }\n  if (kind) {\n    throw new Error(`can't \\`import 'openai/shims/${shims.kind}'\\` after \\`import 'openai/shims/${kind}'\\``);\n  }\n  auto = options.auto;\n  kind = shims.kind;\n  fetch = shims.fetch;\n  Request = shims.Request;\n  Response = shims.Response;\n  Headers = shims.Headers;\n  FormData = shims.FormData;\n  Blob = shims.Blob;\n  File = shims.File;\n  getMultipartRequestOptions = shims.getMultipartRequestOptions;\n  getDefaultAgent = shims.getDefaultAgent;\n  fileFromPath = shims.fileFromPath;\n  isFsReadStream = shims.isFsReadStream;\n}\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nexport class MultipartBody {\n  constructor(public body: any) {}\n  get [Symbol.toStringTag](): string {\n    return 'MultipartBody';\n  }\n}\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nimport * as shims from './registry.mjs';\nimport * as auto from 'openai/_shims/auto/runtime';\nif (!shims.kind) shims.setShims(auto.getRuntime(), { auto: true });\nexport * from './registry.mjs';\n","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nimport { MultipartBody } from './MultipartBody';\nimport { type RequestOptions } from '../core';\nimport { type Shims } from './registry';\n\nexport function getRuntime({ manuallyImported }: { manuallyImported?: boolean } = {}): Shims {\n  const recommendation =\n    manuallyImported ?\n      `You may need to use polyfills`\n    : `Add one of these imports before your first \\`import … from 'openai'\\`:\n- \\`import 'openai/shims/node'\\` (if you're running on Node)\n- \\`import 'openai/shims/web'\\` (otherwise)\n`;\n\n  let _fetch, _Request, _Response, _Headers;\n  try {\n    // @ts-ignore\n    _fetch = fetch;\n    // @ts-ignore\n    _Request = Request;\n    // @ts-ignore\n    _Response = Response;\n    // @ts-ignore\n    _Headers = Headers;\n  } catch (error) {\n    throw new Error(\n      `this environment is missing the following Web Fetch API type: ${\n        (error as any).message\n      }. ${recommendation}`,\n    );\n  }\n\n  return {\n    kind: 'web',\n    fetch: _fetch,\n    Request: _Request,\n    Response: _Response,\n    Headers: _Headers,\n    FormData:\n      // @ts-ignore\n      typeof FormData !== 'undefined' ? FormData : (\n        class FormData {\n          // @ts-ignore\n          constructor() {\n            throw new Error(\n              `file uploads aren't supported in this environment yet as 'FormData' is undefined. ${recommendation}`,\n            );\n          }\n        }\n      ),\n    Blob:\n      typeof Blob !== 'undefined' ? Blob : (\n        class Blob {\n          constructor() {\n            throw new Error(\n              `file uploads aren't supported in this environment yet as 'Blob' is undefined. ${recommendation}`,\n            );\n          }\n        }\n      ),\n    File:\n      // @ts-ignore\n      typeof File !== 'undefined' ? File : (\n        class File {\n          // @ts-ignore\n          constructor() {\n            throw new Error(\n              `file uploads aren't supported in this environment yet as 'File' is undefined. ${recommendation}`,\n            );\n          }\n        }\n      ),\n    getMultipartRequestOptions: async <T extends {} = Record<string, unknown>>(\n      // @ts-ignore\n      form: FormData,\n      opts: RequestOptions<T>,\n    ): Promise<RequestOptions<T>> => ({\n      ...opts,\n      body: new MultipartBody(form) as any,\n    }),\n    getDefaultAgent: (url: string) => undefined,\n    fileFromPath: () => {\n      throw new Error(\n        'The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/openai/openai-node#file-uploads',\n      );\n    },\n    isFsReadStream: (value: any) => false,\n  };\n}\n","import { type RequestOptions } from './core';\nimport {\n  FormData,\n  File,\n  type Blob,\n  type FilePropertyBag,\n  getMultipartRequestOptions,\n  type FsReadStream,\n  isFsReadStream,\n} from './_shims/index';\nimport { MultipartBody } from './_shims/MultipartBody';\nexport { fileFromPath } from './_shims/index';\n\ntype BlobLikePart = string | ArrayBuffer | ArrayBufferView | BlobLike | Uint8Array | DataView;\nexport type BlobPart = string | ArrayBuffer | ArrayBufferView | Blob | Uint8Array | DataView;\n\n/**\n * Typically, this is a native \"File\" class.\n *\n * We provide the {@link toFile} utility to convert a variety of objects\n * into the File class.\n *\n * For convenience, you can also pass a fetch Response, or in Node,\n * the result of fs.createReadStream().\n */\nexport type Uploadable = FileLike | ResponseLike | FsReadStream;\n\n/**\n * Intended to match web.Blob, node.Blob, node-fetch.Blob, etc.\n */\nexport interface BlobLike {\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/size) */\n  readonly size: number;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/type) */\n  readonly type: string;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/text) */\n  text(): Promise<string>;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/slice) */\n  slice(start?: number, end?: number): BlobLike;\n  // unfortunately @types/node-fetch@^2.6.4 doesn't type the arrayBuffer method\n}\n\n/**\n * Intended to match web.File, node.File, node-fetch.File, etc.\n */\nexport interface FileLike extends BlobLike {\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/lastModified) */\n  readonly lastModified: number;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/name) */\n  readonly name: string;\n}\n\n/**\n * Intended to match web.Response, node.Response, node-fetch.Response, etc.\n */\nexport interface ResponseLike {\n  url: string;\n  blob(): Promise<BlobLike>;\n}\n\nexport const isResponseLike = (value: any): value is ResponseLike =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.url === 'string' &&\n  typeof value.blob === 'function';\n\nexport const isFileLike = (value: any): value is FileLike =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.name === 'string' &&\n  typeof value.lastModified === 'number' &&\n  isBlobLike(value);\n\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */\nexport const isBlobLike = (value: any): value is BlobLike & { arrayBuffer(): Promise<ArrayBuffer> } =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.size === 'number' &&\n  typeof value.type === 'string' &&\n  typeof value.text === 'function' &&\n  typeof value.slice === 'function' &&\n  typeof value.arrayBuffer === 'function';\n\nexport const isUploadable = (value: any): value is Uploadable => {\n  return isFileLike(value) || isResponseLike(value) || isFsReadStream(value);\n};\n\nexport type ToFileInput = Uploadable | Exclude<BlobLikePart, string> | AsyncIterable<BlobLikePart>;\n\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */\nexport async function toFile(\n  value: ToFileInput | PromiseLike<ToFileInput>,\n  name?: string | null | undefined,\n  options: FilePropertyBag | undefined = {},\n): Promise<FileLike> {\n  // If it's a promise, resolve it.\n  value = await value;\n\n  if (isResponseLike(value)) {\n    const blob = await value.blob();\n    name ||= new URL(value.url).pathname.split(/[\\\\/]/).pop() ?? 'unknown_file';\n\n    return new File([blob as any], name, options);\n  }\n\n  const bits = await getBytes(value);\n\n  name ||= getName(value) ?? 'unknown_file';\n\n  if (!options.type) {\n    const type = (bits[0] as any)?.type;\n    if (typeof type === 'string') {\n      options = { ...options, type };\n    }\n  }\n\n  return new File(bits, name, options);\n}\n\nasync function getBytes(value: ToFileInput): Promise<Array<BlobPart>> {\n  let parts: Array<BlobPart> = [];\n  if (\n    typeof value === 'string' ||\n    ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\n    value instanceof ArrayBuffer\n  ) {\n    parts.push(value);\n  } else if (isBlobLike(value)) {\n    parts.push(await value.arrayBuffer());\n  } else if (\n    isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n  ) {\n    for await (const chunk of value) {\n      parts.push(chunk as BlobPart); // TODO, consider validating?\n    }\n  } else {\n    throw new Error(\n      `Unexpected data type: ${typeof value}; constructor: ${\n        value?.constructor?.name\n      }; props: ${propsForError(value)}`,\n    );\n  }\n\n  return parts;\n}\n\nfunction propsForError(value: any): string {\n  const props = Object.getOwnPropertyNames(value);\n  return `[${props.map((p) => `\"${p}\"`).join(', ')}]`;\n}\n\nfunction getName(value: any): string | undefined {\n  return (\n    getStringFromMaybeBuffer(value.name) ||\n    getStringFromMaybeBuffer(value.filename) ||\n    // For fs.ReadStream\n    getStringFromMaybeBuffer(value.path)?.split(/[\\\\/]/).pop()\n  );\n}\n\nconst getStringFromMaybeBuffer = (x: string | Buffer | unknown): string | undefined => {\n  if (typeof x === 'string') return x;\n  if (typeof Buffer !== 'undefined' && x instanceof Buffer) return String(x);\n  return undefined;\n};\n\nconst isAsyncIterableIterator = (value: any): value is AsyncIterableIterator<unknown> =>\n  value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\n\nexport const isMultipartBody = (body: any): body is MultipartBody =>\n  body && typeof body === 'object' && body.body && body[Symbol.toStringTag] === 'MultipartBody';\n\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */\nexport const maybeMultipartFormRequestOptions = async <T extends {} = Record<string, unknown>>(\n  opts: RequestOptions<T>,\n): Promise<RequestOptions<T | MultipartBody>> => {\n  if (!hasUploadableValue(opts.body)) return opts;\n\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\n\nexport const multipartFormRequestOptions = async <T extends {} = Record<string, unknown>>(\n  opts: RequestOptions<T>,\n): Promise<RequestOptions<T | MultipartBody>> => {\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\n\nexport const createForm = async <T = Record<string, unknown>>(body: T | undefined): Promise<FormData> => {\n  const form = new FormData();\n  await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));\n  return form;\n};\n\nconst hasUploadableValue = (value: unknown): boolean => {\n  if (isUploadable(value)) return true;\n  if (Array.isArray(value)) return value.some(hasUploadableValue);\n  if (value && typeof value === 'object') {\n    for (const k in value) {\n      if (hasUploadableValue((value as any)[k])) return true;\n    }\n  }\n  return false;\n};\n\nconst addFormValue = async (form: FormData, key: string, value: unknown): Promise<void> => {\n  if (value === undefined) return;\n  if (value == null) {\n    throw new TypeError(\n      `Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`,\n    );\n  }\n\n  // TODO: make nested formats configurable\n  if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n    form.append(key, String(value));\n  } else if (isUploadable(value)) {\n    const file = await toFile(value);\n    form.append(key, file as File);\n  } else if (Array.isArray(value)) {\n    await Promise.all(value.map((entry) => addFormValue(form, key + '[]', entry)));\n  } else if (typeof value === 'object') {\n    await Promise.all(\n      Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)),\n    );\n  } else {\n    throw new TypeError(\n      `Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`,\n    );\n  }\n};\n","import { VERSION } from './version';\nimport { Stream } from './streaming';\nimport {\n  OpenAIError,\n  APIError,\n  APIConnectionError,\n  APIConnectionTimeoutError,\n  APIUserAbortError,\n} from './error';\nimport {\n  kind as shimsKind,\n  type Readable,\n  getDefaultAgent,\n  type Agent,\n  fetch,\n  type RequestInfo,\n  type RequestInit,\n  type Response,\n  type HeadersInit,\n} from './_shims/index';\nexport { type Response };\nimport { isMultipartBody } from './uploads';\nexport {\n  maybeMultipartFormRequestOptions,\n  multipartFormRequestOptions,\n  createForm,\n  type Uploadable,\n} from './uploads';\n\nconst MAX_RETRIES = 2;\n\nexport type Fetch = (url: RequestInfo, init?: RequestInit) => Promise<Response>;\n\ntype PromiseOrValue<T> = T | Promise<T>;\n\ntype APIResponseProps = {\n  response: Response;\n  options: FinalRequestOptions;\n  controller: AbortController;\n};\n\nasync function defaultParseResponse<T>(props: APIResponseProps): Promise<T> {\n  const { response } = props;\n  if (props.options.stream) {\n    // Note: there is an invariant here that isn't represented in the type system\n    // that if you set `stream: true` the response type must also be `Stream<T>`\n    return new Stream(response, props.controller) as any;\n  }\n\n  const contentType = response.headers.get('content-type');\n  if (contentType?.includes('application/json')) {\n    const json = await response.json();\n\n    debug('response', response.status, response.url, response.headers, json);\n\n    return json as T;\n  }\n\n  // TODO handle blob, arraybuffer, other content types, etc.\n  const text = await response.text();\n  debug('response', response.status, response.url, response.headers, text);\n  return text as any as T;\n}\n\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nexport class APIPromise<T> extends Promise<T> {\n  private parsedPromise: Promise<T> | undefined;\n\n  constructor(\n    private responsePromise: Promise<APIResponseProps>,\n    private parseResponse: (props: APIResponseProps) => PromiseOrValue<T> = defaultParseResponse,\n  ) {\n    super((resolve) => {\n      // this is maybe a bit weird but this has to be a no-op to not implicitly\n      // parse the response body; instead .then, .catch, .finally are overridden\n      // to parse the response\n      resolve(null as any);\n    });\n  }\n\n  _thenUnwrap<U>(transform: (data: T) => U): APIPromise<U> {\n    return new APIPromise(this.responsePromise, async (props) => transform(await this.parseResponse(props)));\n  }\n\n  /**\n   * Gets the raw `Response` instance instead of parsing the response\n   * data.\n   *\n   * If you want to parse the response body but still get the `Response`\n   * instance, you can use {@link withResponse()}.\n   *\n   * 👋 Getting the wrong TypeScript type for `Response`?\n   * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n   * or add one of these imports before your first `import … from 'openai'`:\n   * - `import 'openai/shims/node'` (if you're running on Node)\n   * - `import 'openai/shims/web'` (otherwise)\n   */\n  asResponse(): Promise<Response> {\n    return this.responsePromise.then((p) => p.response);\n  }\n  /**\n   * Gets the parsed response data and the raw `Response` instance.\n   *\n   * If you just want to get the raw `Response` instance without parsing it,\n   * you can use {@link asResponse()}.\n   *\n   *\n   * 👋 Getting the wrong TypeScript type for `Response`?\n   * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n   * or add one of these imports before your first `import … from 'openai'`:\n   * - `import 'openai/shims/node'` (if you're running on Node)\n   * - `import 'openai/shims/web'` (otherwise)\n   */\n  async withResponse(): Promise<{ data: T; response: Response }> {\n    const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n    return { data, response };\n  }\n\n  private parse(): Promise<T> {\n    if (!this.parsedPromise) {\n      this.parsedPromise = this.responsePromise.then(this.parseResponse);\n    }\n    return this.parsedPromise;\n  }\n\n  override then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n  ): Promise<TResult1 | TResult2> {\n    return this.parse().then(onfulfilled, onrejected);\n  }\n\n  override catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,\n  ): Promise<T | TResult> {\n    return this.parse().catch(onrejected);\n  }\n\n  override finally(onfinally?: (() => void) | undefined | null): Promise<T> {\n    return this.parse().finally(onfinally);\n  }\n}\n\nexport abstract class APIClient {\n  baseURL: string;\n  maxRetries: number;\n  timeout: number;\n  httpAgent: Agent | undefined;\n\n  private fetch: Fetch;\n  protected idempotencyHeader?: string;\n\n  constructor({\n    baseURL,\n    maxRetries,\n    timeout = 600000, // 10 minutes\n    httpAgent,\n    fetch: overridenFetch,\n  }: {\n    baseURL: string;\n    maxRetries?: number | undefined;\n    timeout: number | undefined;\n    httpAgent: Agent | undefined;\n    fetch: Fetch | undefined;\n  }) {\n    this.baseURL = baseURL;\n    this.maxRetries = validatePositiveInteger('maxRetries', maxRetries ?? MAX_RETRIES);\n    this.timeout = validatePositiveInteger('timeout', timeout);\n    this.httpAgent = httpAgent;\n\n    this.fetch = overridenFetch ?? fetch;\n  }\n\n  protected authHeaders(opts: FinalRequestOptions): Headers {\n    return {};\n  }\n\n  /**\n   * Override this to add your own default headers, for example:\n   *\n   *  {\n   *    ...super.defaultHeaders(),\n   *    Authorization: 'Bearer 123',\n   *  }\n   */\n  protected defaultHeaders(opts: FinalRequestOptions): Headers {\n    return {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'User-Agent': this.getUserAgent(),\n      ...getPlatformHeaders(),\n      ...this.authHeaders(opts),\n    };\n  }\n\n  protected abstract defaultQuery(): DefaultQuery | undefined;\n\n  /**\n   * Override this to add your own headers validation:\n   */\n  protected validateHeaders(headers: Headers, customHeaders: Headers) {}\n\n  protected defaultIdempotencyKey(): string {\n    return `stainless-node-retry-${uuid4()}`;\n  }\n\n  get<Req extends {}, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('get', path, opts);\n  }\n\n  post<Req extends {}, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('post', path, opts);\n  }\n\n  patch<Req extends {}, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('patch', path, opts);\n  }\n\n  put<Req extends {}, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('put', path, opts);\n  }\n\n  delete<Req extends {}, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('delete', path, opts);\n  }\n\n  private methodRequest<Req extends {}, Rsp>(\n    method: HTTPMethod,\n    path: string,\n    opts?: PromiseOrValue<RequestOptions<Req>>,\n  ): APIPromise<Rsp> {\n    return this.request(Promise.resolve(opts).then((opts) => ({ method, path, ...opts })));\n  }\n\n  getAPIList<Item, PageClass extends AbstractPage<Item> = AbstractPage<Item>>(\n    path: string,\n    Page: new (...args: any[]) => PageClass,\n    opts?: RequestOptions<any>,\n  ): PagePromise<PageClass, Item> {\n    return this.requestAPIList(Page, { method: 'get', path, ...opts });\n  }\n\n  private calculateContentLength(body: unknown): string | null {\n    if (typeof body === 'string') {\n      if (typeof Buffer !== 'undefined') {\n        return Buffer.byteLength(body, 'utf8').toString();\n      }\n\n      if (typeof TextEncoder !== 'undefined') {\n        const encoder = new TextEncoder();\n        const encoded = encoder.encode(body);\n        return encoded.length.toString();\n      }\n    }\n\n    return null;\n  }\n\n  buildRequest<Req extends {}>(\n    options: FinalRequestOptions<Req>,\n  ): { req: RequestInit; url: string; timeout: number } {\n    const { method, path, query, headers: headers = {} } = options;\n\n    const body =\n      isMultipartBody(options.body) ? options.body.body\n      : options.body ? JSON.stringify(options.body, null, 2)\n      : null;\n    const contentLength = this.calculateContentLength(body);\n\n    const url = this.buildURL(path!, query);\n    if ('timeout' in options) validatePositiveInteger('timeout', options.timeout);\n    const timeout = options.timeout ?? this.timeout;\n    const httpAgent = options.httpAgent ?? this.httpAgent ?? getDefaultAgent(url);\n    const minAgentTimeout = timeout + 1000;\n    if (\n      typeof (httpAgent as any)?.options?.timeout === 'number' &&\n      minAgentTimeout > ((httpAgent as any).options.timeout ?? 0)\n    ) {\n      // Allow any given request to bump our agent active socket timeout.\n      // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\n      // and without mutating agent we would need to create more of them.\n      // This tradeoff optimizes for performance.\n      (httpAgent as any).options.timeout = minAgentTimeout;\n    }\n\n    if (this.idempotencyHeader && method !== 'get') {\n      if (!options.idempotencyKey) options.idempotencyKey = this.defaultIdempotencyKey();\n      headers[this.idempotencyHeader] = options.idempotencyKey;\n    }\n\n    const reqHeaders: Record<string, string> = {\n      ...(contentLength && { 'Content-Length': contentLength }),\n      ...this.defaultHeaders(options),\n      ...headers,\n    };\n    // let builtin fetch set the Content-Type for multipart bodies\n    if (isMultipartBody(options.body) && shimsKind !== 'node') {\n      delete reqHeaders['Content-Type'];\n    }\n\n    // Strip any headers being explicitly omitted with null\n    Object.keys(reqHeaders).forEach((key) => reqHeaders[key] === null && delete reqHeaders[key]);\n\n    const req: RequestInit = {\n      method,\n      ...(body && { body: body as any }),\n      headers: reqHeaders,\n      ...(httpAgent && { agent: httpAgent }),\n      // @ts-ignore node-fetch uses a custom AbortSignal type that is\n      // not compatible with standard web types\n      signal: options.signal ?? null,\n    };\n\n    this.validateHeaders(reqHeaders, headers);\n\n    return { req, url, timeout };\n  }\n\n  /**\n   * Used as a callback for mutating the given `RequestInit` object.\n   *\n   * This is useful for cases where you want to add certain headers based off of\n   * the request properties, e.g. `method` or `url`.\n   */\n  protected async prepareRequest(\n    request: RequestInit,\n    { url, options }: { url: string; options: FinalRequestOptions },\n  ): Promise<void> {}\n\n  protected parseHeaders(headers: HeadersInit | null | undefined): Record<string, string> {\n    return (\n      !headers ? {}\n      : Symbol.iterator in headers ?\n        Object.fromEntries(Array.from(headers as Iterable<string[]>).map((header) => [...header]))\n      : { ...headers }\n    );\n  }\n\n  protected makeStatusError(\n    status: number | undefined,\n    error: Object | undefined,\n    message: string | undefined,\n    headers: Headers | undefined,\n  ) {\n    return APIError.generate(status, error, message, headers);\n  }\n\n  request<Req extends {}, Rsp>(\n    options: PromiseOrValue<FinalRequestOptions<Req>>,\n    remainingRetries: number | null = null,\n  ): APIPromise<Rsp> {\n    return new APIPromise(this.makeRequest(options, remainingRetries));\n  }\n\n  private async makeRequest(\n    optionsInput: PromiseOrValue<FinalRequestOptions>,\n    retriesRemaining: number | null,\n  ): Promise<APIResponseProps> {\n    const options = await optionsInput;\n    if (retriesRemaining == null) {\n      retriesRemaining = options.maxRetries ?? this.maxRetries;\n    }\n\n    const { req, url, timeout } = this.buildRequest(options);\n\n    await this.prepareRequest(req, { url, options });\n\n    debug('request', url, options, req.headers);\n\n    if (options.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n\n    const controller = new AbortController();\n    const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n\n    if (response instanceof Error) {\n      if (options.signal?.aborted) {\n        throw new APIUserAbortError();\n      }\n      if (retriesRemaining) {\n        return this.retryRequest(options, retriesRemaining);\n      }\n      if (response.name === 'AbortError') {\n        throw new APIConnectionTimeoutError();\n      }\n      throw new APIConnectionError({ cause: response });\n    }\n\n    const responseHeaders = createResponseHeaders(response.headers);\n\n    if (!response.ok) {\n      if (retriesRemaining && this.shouldRetry(response)) {\n        return this.retryRequest(options, retriesRemaining, responseHeaders);\n      }\n\n      const errText = await response.text().catch((e) => castToError(e).message);\n      const errJSON = safeJSON(errText);\n      const errMessage = errJSON ? undefined : errText;\n\n      debug('response', response.status, url, responseHeaders, errMessage);\n\n      const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\n      throw err;\n    }\n\n    return { response, options, controller };\n  }\n\n  requestAPIList<Item = unknown, PageClass extends AbstractPage<Item> = AbstractPage<Item>>(\n    Page: new (...args: ConstructorParameters<typeof AbstractPage>) => PageClass,\n    options: FinalRequestOptions,\n  ): PagePromise<PageClass, Item> {\n    const request = this.makeRequest(options, null);\n    return new PagePromise<PageClass, Item>(this, request, Page);\n  }\n\n  buildURL<Req extends Record<string, unknown>>(path: string, query: Req | null | undefined): string {\n    const url =\n      isAbsoluteURL(path) ?\n        new URL(path)\n      : new URL(this.baseURL + (this.baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));\n\n    const defaultQuery = this.defaultQuery();\n    if (!isEmptyObj(defaultQuery)) {\n      query = { ...defaultQuery, ...query } as Req;\n    }\n\n    if (query) {\n      url.search = this.stringifyQuery(query);\n    }\n\n    return url.toString();\n  }\n\n  protected stringifyQuery(query: Record<string, unknown>): string {\n    return Object.entries(query)\n      .filter(([_, value]) => typeof value !== 'undefined')\n      .map(([key, value]) => {\n        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n          return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n        }\n        if (value === null) {\n          return `${encodeURIComponent(key)}=`;\n        }\n        throw new OpenAIError(\n          `Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`,\n        );\n      })\n      .join('&');\n  }\n\n  async fetchWithTimeout(\n    url: RequestInfo,\n    init: RequestInit | undefined,\n    ms: number,\n    controller: AbortController,\n  ): Promise<Response> {\n    const { signal, ...options } = init || {};\n    if (signal) signal.addEventListener('abort', () => controller.abort());\n\n    const timeout = setTimeout(() => controller.abort(), ms);\n\n    return (\n      this.getRequestClient()\n        // use undefined this binding; fetch errors if bound to something else in browser/cloudflare\n        .fetch.call(undefined, url, { signal: controller.signal as any, ...options })\n        .finally(() => {\n          clearTimeout(timeout);\n        })\n    );\n  }\n\n  protected getRequestClient(): RequestClient {\n    return { fetch: this.fetch };\n  }\n\n  private shouldRetry(response: Response): boolean {\n    // Note this is not a standard header.\n    const shouldRetryHeader = response.headers.get('x-should-retry');\n\n    // If the server explicitly says whether or not to retry, obey.\n    if (shouldRetryHeader === 'true') return true;\n    if (shouldRetryHeader === 'false') return false;\n\n    // Retry on request timeouts.\n    if (response.status === 408) return true;\n\n    // Retry on lock timeouts.\n    if (response.status === 409) return true;\n\n    // Retry on rate limits.\n    if (response.status === 429) return true;\n\n    // Retry internal errors.\n    if (response.status >= 500) return true;\n\n    return false;\n  }\n\n  private async retryRequest(\n    options: FinalRequestOptions,\n    retriesRemaining: number,\n    responseHeaders?: Headers | undefined,\n  ): Promise<APIResponseProps> {\n    retriesRemaining -= 1;\n\n    // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n    let timeoutMillis: number | undefined;\n    const retryAfterHeader = responseHeaders?.['retry-after'];\n    if (retryAfterHeader) {\n      const timeoutSeconds = parseInt(retryAfterHeader);\n      if (!Number.isNaN(timeoutSeconds)) {\n        timeoutMillis = timeoutSeconds * 1000;\n      } else {\n        timeoutMillis = Date.parse(retryAfterHeader) - Date.now();\n      }\n    }\n\n    // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n    // just do what it says, but otherwise calculate a default\n    if (\n      !timeoutMillis ||\n      !Number.isInteger(timeoutMillis) ||\n      timeoutMillis <= 0 ||\n      timeoutMillis > 60 * 1000\n    ) {\n      const maxRetries = options.maxRetries ?? this.maxRetries;\n      timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);\n    }\n    await sleep(timeoutMillis);\n\n    return this.makeRequest(options, retriesRemaining);\n  }\n\n  private calculateDefaultRetryTimeoutMillis(retriesRemaining: number, maxRetries: number): number {\n    const initialRetryDelay = 0.5;\n    const maxRetryDelay = 2;\n\n    const numRetries = maxRetries - retriesRemaining;\n\n    // Apply exponential backoff, but not more than the max.\n    const sleepSeconds = Math.min(initialRetryDelay * Math.pow(numRetries - 1, 2), maxRetryDelay);\n\n    // Apply some jitter, plus-or-minus half a second.\n    const jitter = Math.random() - 0.5;\n\n    return (sleepSeconds + jitter) * 1000;\n  }\n\n  private getUserAgent(): string {\n    return `${this.constructor.name}/JS ${VERSION}`;\n  }\n}\n\nexport class APIResource {\n  protected client: APIClient;\n  constructor(client: APIClient) {\n    this.client = client;\n\n    this.get = client.get.bind(client);\n    this.post = client.post.bind(client);\n    this.patch = client.patch.bind(client);\n    this.put = client.put.bind(client);\n    this.delete = client.delete.bind(client);\n    this.getAPIList = client.getAPIList.bind(client);\n  }\n\n  protected get: APIClient['get'];\n  protected post: APIClient['post'];\n  protected patch: APIClient['patch'];\n  protected put: APIClient['put'];\n  protected delete: APIClient['delete'];\n  protected getAPIList: APIClient['getAPIList'];\n}\n\nexport type PageInfo = { url: URL } | { params: Record<string, unknown> | null };\n\nexport abstract class AbstractPage<Item> implements AsyncIterable<Item> {\n  #client: APIClient;\n  protected options: FinalRequestOptions;\n\n  protected response: Response;\n  protected body: unknown;\n\n  constructor(client: APIClient, response: Response, body: unknown, options: FinalRequestOptions) {\n    this.#client = client;\n    this.options = options;\n    this.response = response;\n    this.body = body;\n  }\n\n  /**\n   * @deprecated Use nextPageInfo instead\n   */\n  abstract nextPageParams(): Partial<Record<string, unknown>> | null;\n  abstract nextPageInfo(): PageInfo | null;\n\n  abstract getPaginatedItems(): Item[];\n\n  hasNextPage(): boolean {\n    const items = this.getPaginatedItems();\n    if (!items.length) return false;\n    return this.nextPageInfo() != null;\n  }\n\n  async getNextPage(): Promise<this> {\n    const nextInfo = this.nextPageInfo();\n    if (!nextInfo) {\n      throw new OpenAIError(\n        'No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.',\n      );\n    }\n    const nextOptions = { ...this.options };\n    if ('params' in nextInfo) {\n      nextOptions.query = { ...nextOptions.query, ...nextInfo.params };\n    } else if ('url' in nextInfo) {\n      const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];\n      for (const [key, value] of params) {\n        nextInfo.url.searchParams.set(key, value as any);\n      }\n      nextOptions.query = undefined;\n      nextOptions.path = nextInfo.url.toString();\n    }\n    return await this.#client.requestAPIList(this.constructor as any, nextOptions);\n  }\n\n  async *iterPages() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let page: AbstractPage<Item> = this;\n    yield page;\n    while (page.hasNextPage()) {\n      page = await page.getNextPage();\n      yield page;\n    }\n  }\n\n  async *[Symbol.asyncIterator]() {\n    for await (const page of this.iterPages()) {\n      for (const item of page.getPaginatedItems()) {\n        yield item;\n      }\n    }\n  }\n}\n\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */\nexport class PagePromise<\n    PageClass extends AbstractPage<Item>,\n    Item = ReturnType<PageClass['getPaginatedItems']>[number],\n  >\n  extends APIPromise<PageClass>\n  implements AsyncIterable<Item>\n{\n  constructor(\n    client: APIClient,\n    request: Promise<APIResponseProps>,\n    Page: new (...args: ConstructorParameters<typeof AbstractPage>) => PageClass,\n  ) {\n    super(\n      request,\n      async (props) => new Page(client, props.response, await defaultParseResponse(props), props.options),\n    );\n  }\n\n  /**\n   * Allow auto-paginating iteration on an unawaited list call, eg:\n   *\n   *    for await (const item of client.items.list()) {\n   *      console.log(item)\n   *    }\n   */\n  async *[Symbol.asyncIterator]() {\n    const page = await this;\n    for await (const item of page) {\n      yield item;\n    }\n  }\n}\n\nexport const createResponseHeaders = (\n  headers: Awaited<ReturnType<Fetch>>['headers'],\n): Record<string, string> => {\n  return new Proxy(\n    Object.fromEntries(\n      // @ts-ignore\n      headers.entries(),\n    ),\n    {\n      get(target, name) {\n        const key = name.toString();\n        return target[key.toLowerCase()] || target[key];\n      },\n    },\n  );\n};\n\ntype HTTPMethod = 'get' | 'post' | 'put' | 'patch' | 'delete';\n\nexport type RequestClient = { fetch: Fetch };\nexport type Headers = Record<string, string | null | undefined>;\nexport type DefaultQuery = Record<string, string | undefined>;\nexport type KeysEnum<T> = { [P in keyof Required<T>]: true };\n\nexport type RequestOptions<Req extends {} = Record<string, unknown> | Readable> = {\n  method?: HTTPMethod;\n  path?: string;\n  query?: Req | undefined;\n  body?: Req | undefined;\n  headers?: Headers | undefined;\n\n  maxRetries?: number;\n  stream?: boolean | undefined;\n  timeout?: number;\n  httpAgent?: Agent;\n  signal?: AbortSignal | undefined | null;\n  idempotencyKey?: string;\n};\n\n// This is required so that we can determine if a given object matches the RequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys: KeysEnum<RequestOptions> = {\n  method: true,\n  path: true,\n  query: true,\n  body: true,\n  headers: true,\n\n  maxRetries: true,\n  stream: true,\n  timeout: true,\n  httpAgent: true,\n  signal: true,\n  idempotencyKey: true,\n};\n\nexport const isRequestOptions = (obj: unknown): obj is RequestOptions<Record<string, unknown> | Readable> => {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    !isEmptyObj(obj) &&\n    Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k))\n  );\n};\n\nexport type FinalRequestOptions<Req extends {} = Record<string, unknown> | Readable> = RequestOptions<Req> & {\n  method: HTTPMethod;\n  path: string;\n};\n\ndeclare const Deno: any;\ndeclare const EdgeRuntime: any;\ntype Arch = 'x32' | 'x64' | 'arm' | 'arm64' | `other:${string}` | 'unknown';\ntype PlatformName =\n  | 'MacOS'\n  | 'Linux'\n  | 'Windows'\n  | 'FreeBSD'\n  | 'OpenBSD'\n  | 'iOS'\n  | 'Android'\n  | `Other:${string}`\n  | 'Unknown';\ntype Browser = 'ie' | 'edge' | 'chrome' | 'firefox' | 'safari';\ntype PlatformProperties = {\n  'X-Stainless-Lang': 'js';\n  'X-Stainless-Package-Version': string;\n  'X-Stainless-OS': PlatformName;\n  'X-Stainless-Arch': Arch;\n  'X-Stainless-Runtime': 'node' | 'deno' | 'edge' | `browser:${Browser}` | 'unknown';\n  'X-Stainless-Runtime-Version': string;\n};\nconst getPlatformProperties = (): PlatformProperties => {\n  if (typeof Deno !== 'undefined' && Deno.build != null) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(Deno.build.os),\n      'X-Stainless-Arch': normalizeArch(Deno.build.arch),\n      'X-Stainless-Runtime': 'deno',\n      'X-Stainless-Runtime-Version': Deno.version,\n    };\n  }\n  if (typeof EdgeRuntime !== 'undefined') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': `other:${EdgeRuntime}`,\n      'X-Stainless-Runtime': 'edge',\n      'X-Stainless-Runtime-Version': process.version,\n    };\n  }\n  // Check if Node.js\n  if (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(process.platform),\n      'X-Stainless-Arch': normalizeArch(process.arch),\n      'X-Stainless-Runtime': 'node',\n      'X-Stainless-Runtime-Version': process.version,\n    };\n  }\n\n  const browserInfo = getBrowserInfo();\n  if (browserInfo) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': 'unknown',\n      'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\n      'X-Stainless-Runtime-Version': browserInfo.version,\n    };\n  }\n\n  // TODO add support for Cloudflare workers, etc.\n  return {\n    'X-Stainless-Lang': 'js',\n    'X-Stainless-Package-Version': VERSION,\n    'X-Stainless-OS': 'Unknown',\n    'X-Stainless-Arch': 'unknown',\n    'X-Stainless-Runtime': 'unknown',\n    'X-Stainless-Runtime-Version': 'unknown',\n  };\n};\n\ntype BrowserInfo = {\n  browser: Browser;\n  version: string;\n};\n\ndeclare const navigator: { userAgent: string } | undefined;\n\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo(): BrowserInfo | null {\n  if (typeof navigator === 'undefined' || !navigator) {\n    return null;\n  }\n\n  // NOTE: The order matters here!\n  const browserPatterns = [\n    { key: 'edge' as const, pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'ie' as const, pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'ie' as const, pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'chrome' as const, pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'firefox' as const, pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'safari' as const, pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/ },\n  ];\n\n  // Find the FIRST matching browser\n  for (const { key, pattern } of browserPatterns) {\n    const match = pattern.exec(navigator.userAgent);\n    if (match) {\n      const major = match[1] || 0;\n      const minor = match[2] || 0;\n      const patch = match[3] || 0;\n\n      return { browser: key, version: `${major}.${minor}.${patch}` };\n    }\n  }\n\n  return null;\n}\n\nconst normalizeArch = (arch: string): Arch => {\n  // Node docs:\n  // - https://nodejs.org/api/process.html#processarch\n  // Deno docs:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  if (arch === 'x32') return 'x32';\n  if (arch === 'x86_64' || arch === 'x64') return 'x64';\n  if (arch === 'arm') return 'arm';\n  if (arch === 'aarch64' || arch === 'arm64') return 'arm64';\n  if (arch) return `other:${arch}`;\n  return 'unknown';\n};\n\nconst normalizePlatform = (platform: string): PlatformName => {\n  // Node platforms:\n  // - https://nodejs.org/api/process.html#processplatform\n  // Deno platforms:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  // - https://github.com/denoland/deno/issues/14799\n\n  platform = platform.toLowerCase();\n\n  // NOTE: this iOS check is untested and may not work\n  // Node does not work natively on IOS, there is a fork at\n  // https://github.com/nodejs-mobile/nodejs-mobile\n  // however it is unknown at the time of writing how to detect if it is running\n  if (platform.includes('ios')) return 'iOS';\n  if (platform === 'android') return 'Android';\n  if (platform === 'darwin') return 'MacOS';\n  if (platform === 'win32') return 'Windows';\n  if (platform === 'freebsd') return 'FreeBSD';\n  if (platform === 'openbsd') return 'OpenBSD';\n  if (platform === 'linux') return 'Linux';\n  if (platform) return `Other:${platform}`;\n  return 'Unknown';\n};\n\nlet _platformHeaders: PlatformProperties;\nconst getPlatformHeaders = () => {\n  return (_platformHeaders ??= getPlatformProperties());\n};\n\nexport const safeJSON = (text: string) => {\n  try {\n    return JSON.parse(text);\n  } catch (err) {\n    return undefined;\n  }\n};\n\n// https://stackoverflow.com/a/19709846\nconst startsWithSchemeRegexp = new RegExp('^(?:[a-z]+:)?//', 'i');\nconst isAbsoluteURL = (url: string): boolean => {\n  return startsWithSchemeRegexp.test(url);\n};\n\nexport const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst validatePositiveInteger = (name: string, n: unknown): number => {\n  if (typeof n !== 'number' || !Number.isInteger(n)) {\n    throw new OpenAIError(`${name} must be an integer`);\n  }\n  if (n < 0) {\n    throw new OpenAIError(`${name} must be a positive integer`);\n  }\n  return n;\n};\n\nexport const castToError = (err: any): Error => {\n  if (err instanceof Error) return err;\n  return new Error(err);\n};\n\nexport const ensurePresent = <T>(value: T | null | undefined): T => {\n  if (value == null) throw new OpenAIError(`Expected a value to be given but received ${value} instead.`);\n  return value;\n};\n\n/**\n * Read an environment variable.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */\nexport const readEnv = (env: string): string | undefined => {\n  if (typeof process !== 'undefined') {\n    return process.env?.[env] ?? undefined;\n  }\n  if (typeof Deno !== 'undefined') {\n    return Deno.env?.get?.(env);\n  }\n  return undefined;\n};\n\nexport const coerceInteger = (value: unknown): number => {\n  if (typeof value === 'number') return Math.round(value);\n  if (typeof value === 'string') return parseInt(value, 10);\n\n  throw new OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\n\nexport const coerceFloat = (value: unknown): number => {\n  if (typeof value === 'number') return value;\n  if (typeof value === 'string') return parseFloat(value);\n\n  throw new OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\n\nexport const coerceBoolean = (value: unknown): boolean => {\n  if (typeof value === 'boolean') return value;\n  if (typeof value === 'string') return value === 'true';\n  return Boolean(value);\n};\n\nexport const maybeCoerceInteger = (value: unknown): number | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceInteger(value);\n};\n\nexport const maybeCoerceFloat = (value: unknown): number | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceFloat(value);\n};\n\nexport const maybeCoerceBoolean = (value: unknown): boolean | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceBoolean(value);\n};\n\n// https://stackoverflow.com/a/34491287\nexport function isEmptyObj(obj: Object | null | undefined): boolean {\n  if (!obj) return true;\n  for (const _k in obj) return false;\n  return true;\n}\n\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nexport function hasOwn(obj: Object, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function debug(action: string, ...args: any[]) {\n  if (typeof process !== 'undefined' && process.env['DEBUG'] === 'true') {\n    console.log(`OpenAI:DEBUG:${action}`, ...args);\n  }\n}\n\n/**\n * https://stackoverflow.com/a/2117523\n */\nconst uuid4 = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n\nexport const isRunningInBrowser = () => {\n  return (\n    // @ts-ignore\n    typeof window !== 'undefined' &&\n    // @ts-ignore\n    typeof window.document !== 'undefined' &&\n    // @ts-ignore\n    typeof navigator !== 'undefined'\n  );\n};\n\nexport interface HeadersProtocol {\n  get: (header: string) => string | null | undefined;\n}\nexport type HeadersLike = Record<string, string | string[] | undefined> | HeadersProtocol;\n\nexport const isHeadersProtocol = (headers: any): headers is HeadersProtocol => {\n  return typeof headers?.get === 'function';\n};\n\nexport const getHeader = (headers: HeadersLike, key: string): string | null | undefined => {\n  const lowerKey = key.toLowerCase();\n  if (isHeadersProtocol(headers)) return headers.get(key) || headers.get(lowerKey);\n  const value = headers[key] || headers[lowerKey];\n  if (Array.isArray(value)) {\n    if (value.length <= 1) return value[0];\n    console.warn(`Received ${value.length} entries for the ${key} header, using the first entry.`);\n    return value[0];\n  }\n  return value;\n};\n\n/**\n * Encodes a string to Base64 format.\n */\nexport const toBase64 = (str: string | null | undefined): string => {\n  if (!str) return '';\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(str).toString('base64');\n  }\n\n  if (typeof btoa !== 'undefined') {\n    return btoa(str);\n  }\n\n  throw new OpenAIError('Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined');\n};\n","// File generated from our OpenAPI spec by Stainless.\n\nimport { AbstractPage, Response, APIClient, FinalRequestOptions, PageInfo } from './core';\n\nexport interface PageResponse<Item> {\n  data: Array<Item>;\n\n  object: string;\n}\n\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class Page<Item> extends AbstractPage<Item> implements PageResponse<Item> {\n  object: string;\n\n  data: Array<Item>;\n\n  constructor(client: APIClient, response: Response, body: PageResponse<Item>, options: FinalRequestOptions) {\n    super(client, response, body, options);\n\n    this.object = body.object;\n    this.data = body.data;\n  }\n\n  getPaginatedItems(): Item[] {\n    return this.data;\n  }\n\n  // @deprecated Please use `nextPageInfo()` instead\n  /**\n   * This page represents a response that isn't actually paginated at the API level\n   * so there will never be any next page params.\n   */\n  nextPageParams(): null {\n    return null;\n  }\n\n  nextPageInfo(): null {\n    return null;\n  }\n}\n\nexport interface CursorPageResponse<Item> {\n  data: Array<Item>;\n}\n\nexport interface CursorPageParams {\n  /**\n   * Identifier for the last job from the previous pagination request.\n   */\n  after?: string;\n\n  /**\n   * Number of fine-tuning jobs to retrieve.\n   */\n  limit?: number;\n}\n\nexport class CursorPage<Item extends { id: string }>\n  extends AbstractPage<Item>\n  implements CursorPageResponse<Item>\n{\n  data: Array<Item>;\n\n  constructor(\n    client: APIClient,\n    response: Response,\n    body: CursorPageResponse<Item>,\n    options: FinalRequestOptions,\n  ) {\n    super(client, response, body, options);\n\n    this.data = body.data;\n  }\n\n  getPaginatedItems(): Item[] {\n    return this.data;\n  }\n\n  // @deprecated Please use `nextPageInfo()` instead\n  nextPageParams(): Partial<CursorPageParams> | null {\n    const info = this.nextPageInfo();\n    if (!info) return null;\n    if ('params' in info) return info.params;\n    const params = Object.fromEntries(info.url.searchParams);\n    if (!Object.keys(params).length) return null;\n    return params;\n  }\n\n  nextPageInfo(): PageInfo | null {\n    if (!this.data?.length) {\n      return null;\n    }\n\n    const next = this.data[this.data.length - 1]?.id;\n    if (!next) return null;\n    return { params: { after: next } };\n  }\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport type { OpenAI } from './index';\n\nexport class APIResource {\n  protected client: OpenAI;\n  constructor(client: OpenAI) {\n    this.client = client;\n\n    this.get = client.get.bind(client);\n    this.post = client.post.bind(client);\n    this.patch = client.patch.bind(client);\n    this.put = client.put.bind(client);\n    this.delete = client.delete.bind(client);\n    this.getAPIList = client.getAPIList.bind(client);\n  }\n\n  protected get: OpenAI['get'];\n  protected post: OpenAI['post'];\n  protected patch: OpenAI['patch'];\n  protected put: OpenAI['put'];\n  protected delete: OpenAI['delete'];\n  protected getAPIList: OpenAI['getAPIList'];\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../core\";\nimport { APIPromise } from \"../core\";\nimport { APIResource } from \"../resource\";\nimport * as API from './index';\nimport { Stream } from \"../streaming\";\n\nexport class Completions extends APIResource {\n  /**\n   * Creates a completion for the provided prompt and parameters.\n   */\n  create(body: CompletionCreateParamsNonStreaming, options?: Core.RequestOptions): APIPromise<Completion>;\n  create(\n    body: CompletionCreateParamsStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<Completion>>;\n  create(\n    body: CompletionCreateParamsBase,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<Completion> | Completion>;\n  create(\n    body: CompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): APIPromise<Completion> | APIPromise<Stream<Completion>> {\n    return this.post('/completions', { body, ...options, stream: body.stream ?? false }) as\n      | APIPromise<Completion>\n      | APIPromise<Stream<Completion>>;\n  }\n}\n\n/**\n * Represents a completion response from the API. Note: both the streamed and\n * non-streamed response objects share the same shape (unlike the chat endpoint).\n */\nexport interface Completion {\n  /**\n   * A unique identifier for the completion.\n   */\n  id: string;\n\n  /**\n   * The list of completion choices the model generated for the input prompt.\n   */\n  choices: Array<CompletionChoice>;\n\n  /**\n   * The Unix timestamp (in seconds) of when the completion was created.\n   */\n  created: number;\n\n  /**\n   * The model used for completion.\n   */\n  model: string;\n\n  /**\n   * The object type, which is always \"text_completion\"\n   */\n  object: string;\n\n  /**\n   * Usage statistics for the completion request.\n   */\n  usage?: CompletionUsage;\n}\n\nexport interface CompletionChoice {\n  /**\n   * The reason the model stopped generating tokens. This will be `stop` if the model\n   * hit a natural stop point or a provided stop sequence, `length` if the maximum\n   * number of tokens specified in the request was reached, or `content_filter` if\n   * content was omitted due to a flag from our content filters.\n   */\n  finish_reason: 'stop' | 'length' | 'content_filter';\n\n  index: number;\n\n  logprobs: CompletionChoice.Logprobs | null;\n\n  text: string;\n}\n\nexport namespace CompletionChoice {\n  export interface Logprobs {\n    text_offset?: Array<number>;\n\n    token_logprobs?: Array<number>;\n\n    tokens?: Array<string>;\n\n    top_logprobs?: Array<Record<string, number>>;\n  }\n}\n\n/**\n * Usage statistics for the completion request.\n */\nexport interface CompletionUsage {\n  /**\n   * Number of tokens in the generated completion.\n   */\n  completion_tokens: number;\n\n  /**\n   * Number of tokens in the prompt.\n   */\n  prompt_tokens: number;\n\n  /**\n   * Total number of tokens used in the request (prompt + completion).\n   */\n  total_tokens: number;\n}\n\nexport type CompletionCreateParams = CompletionCreateParamsNonStreaming | CompletionCreateParamsStreaming;\n\nexport interface CompletionCreateParamsBase {\n  /**\n   * ID of the model to use. You can use the\n   * [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n   * see all of your available models, or see our\n   * [Model overview](https://platform.openai.com/docs/models/overview) for\n   * descriptions of them.\n   */\n  model:\n    | (string & {})\n    | 'babbage-002'\n    | 'davinci-002'\n    | 'gpt-3.5-turbo-instruct'\n    | 'text-davinci-003'\n    | 'text-davinci-002'\n    | 'text-davinci-001'\n    | 'code-davinci-002'\n    | 'text-curie-001'\n    | 'text-babbage-001'\n    | 'text-ada-001';\n\n  /**\n   * The prompt(s) to generate completions for, encoded as a string, array of\n   * strings, array of tokens, or array of token arrays.\n   *\n   * Note that <|endoftext|> is the document separator that the model sees during\n   * training, so if a prompt is not specified the model will generate as if from the\n   * beginning of a new document.\n   */\n  prompt: string | Array<string> | Array<number> | Array<Array<number>> | null;\n\n  /**\n   * Generates `best_of` completions server-side and returns the \"best\" (the one with\n   * the highest log probability per token). Results cannot be streamed.\n   *\n   * When used with `n`, `best_of` controls the number of candidate completions and\n   * `n` specifies how many to return – `best_of` must be greater than `n`.\n   *\n   * **Note:** Because this parameter generates many completions, it can quickly\n   * consume your token quota. Use carefully and ensure that you have reasonable\n   * settings for `max_tokens` and `stop`.\n   */\n  best_of?: number | null;\n\n  /**\n   * Echo back the prompt in addition to the completion\n   */\n  echo?: boolean | null;\n\n  /**\n   * Number between -2.0 and 2.0. Positive values penalize new tokens based on their\n   * existing frequency in the text so far, decreasing the model's likelihood to\n   * repeat the same line verbatim.\n   *\n   * [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/gpt/parameter-details)\n   */\n  frequency_penalty?: number | null;\n\n  /**\n   * Modify the likelihood of specified tokens appearing in the completion.\n   *\n   * Accepts a json object that maps tokens (specified by their token ID in the GPT\n   * tokenizer) to an associated bias value from -100 to 100. You can use this\n   * [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to\n   * convert text to token IDs. Mathematically, the bias is added to the logits\n   * generated by the model prior to sampling. The exact effect will vary per model,\n   * but values between -1 and 1 should decrease or increase likelihood of selection;\n   * values like -100 or 100 should result in a ban or exclusive selection of the\n   * relevant token.\n   *\n   * As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token\n   * from being generated.\n   */\n  logit_bias?: Record<string, number> | null;\n\n  /**\n   * Include the log probabilities on the `logprobs` most likely tokens, as well the\n   * chosen tokens. For example, if `logprobs` is 5, the API will return a list of\n   * the 5 most likely tokens. The API will always return the `logprob` of the\n   * sampled token, so there may be up to `logprobs+1` elements in the response.\n   *\n   * The maximum value for `logprobs` is 5.\n   */\n  logprobs?: number | null;\n\n  /**\n   * The maximum number of [tokens](/tokenizer) to generate in the completion.\n   *\n   * The token count of your prompt plus `max_tokens` cannot exceed the model's\n   * context length.\n   * [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb)\n   * for counting tokens.\n   */\n  max_tokens?: number | null;\n\n  /**\n   * How many completions to generate for each prompt.\n   *\n   * **Note:** Because this parameter generates many completions, it can quickly\n   * consume your token quota. Use carefully and ensure that you have reasonable\n   * settings for `max_tokens` and `stop`.\n   */\n  n?: number | null;\n\n  /**\n   * Number between -2.0 and 2.0. Positive values penalize new tokens based on\n   * whether they appear in the text so far, increasing the model's likelihood to\n   * talk about new topics.\n   *\n   * [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/gpt/parameter-details)\n   */\n  presence_penalty?: number | null;\n\n  /**\n   * Up to 4 sequences where the API will stop generating further tokens. The\n   * returned text will not contain the stop sequence.\n   */\n  stop?: string | null | Array<string>;\n\n  /**\n   * Whether to stream back partial progress. If set, tokens will be sent as\n   * data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available, with the stream terminated by a `data: [DONE]`\n   * message.\n   * [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).\n   */\n  stream?: boolean | null;\n\n  /**\n   * The suffix that comes after a completion of inserted text.\n   */\n  suffix?: string | null;\n\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n   * make the output more random, while lower values like 0.2 will make it more\n   * focused and deterministic.\n   *\n   * We generally recommend altering this or `top_p` but not both.\n   */\n  temperature?: number | null;\n\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the\n   * model considers the results of the tokens with top_p probability mass. So 0.1\n   * means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or `temperature` but not both.\n   */\n  top_p?: number | null;\n\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to monitor\n   * and detect abuse.\n   * [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n   */\n  user?: string;\n}\n\nexport namespace CompletionCreateParams {\n  export type CompletionCreateParamsNonStreaming = API.CompletionCreateParamsNonStreaming;\n  export type CompletionCreateParamsStreaming = API.CompletionCreateParamsStreaming;\n}\n\nexport interface CompletionCreateParamsNonStreaming extends CompletionCreateParamsBase {\n  /**\n   * Whether to stream back partial progress. If set, tokens will be sent as\n   * data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available, with the stream terminated by a `data: [DONE]`\n   * message.\n   * [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).\n   */\n  stream?: false | null;\n}\n\nexport interface CompletionCreateParamsStreaming extends CompletionCreateParamsBase {\n  /**\n   * Whether to stream back partial progress. If set, tokens will be sent as\n   * data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available, with the stream terminated by a `data: [DONE]`\n   * message.\n   * [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).\n   */\n  stream: true;\n}\n\nexport namespace Completions {\n  export import Completion = API.Completion;\n  export import CompletionChoice = API.CompletionChoice;\n  export import CompletionUsage = API.CompletionUsage;\n  export import CompletionCreateParams = API.CompletionCreateParams;\n  export import CompletionCreateParamsNonStreaming = API.CompletionCreateParamsNonStreaming;\n  export import CompletionCreateParamsStreaming = API.CompletionCreateParamsStreaming;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../core\";\nimport { APIPromise } from \"../../core\";\nimport { APIResource } from \"../../resource\";\nimport * as Completions_ from \"../completions\";\nimport * as API from './index';\nimport { Stream } from \"../../streaming\";\n\nexport class Completions extends APIResource {\n  /**\n   * Creates a model response for the given chat conversation.\n   */\n  create(\n    body: ChatCompletionCreateParamsNonStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<ChatCompletion>;\n  create(\n    body: ChatCompletionCreateParamsStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<ChatCompletionChunk>>;\n  create(\n    body: ChatCompletionCreateParamsBase,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<ChatCompletionChunk> | ChatCompletion>;\n  create(\n    body: ChatCompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): APIPromise<ChatCompletion> | APIPromise<Stream<ChatCompletionChunk>> {\n    return this.post('/chat/completions', { body, ...options, stream: body.stream ?? false }) as\n      | APIPromise<ChatCompletion>\n      | APIPromise<Stream<ChatCompletionChunk>>;\n  }\n}\n\n/**\n * Represents a chat completion response returned by model, based on the provided\n * input.\n */\nexport interface ChatCompletion {\n  /**\n   * A unique identifier for the chat completion.\n   */\n  id: string;\n\n  /**\n   * A list of chat completion choices. Can be more than one if `n` is greater\n   * than 1.\n   */\n  choices: Array<ChatCompletion.Choice>;\n\n  /**\n   * The Unix timestamp (in seconds) of when the chat completion was created.\n   */\n  created: number;\n\n  /**\n   * The model used for the chat completion.\n   */\n  model: string;\n\n  /**\n   * The object type, which is always `chat.completion`.\n   */\n  object: string;\n\n  /**\n   * Usage statistics for the completion request.\n   */\n  usage?: Completions_.CompletionUsage;\n}\n\nexport namespace ChatCompletion {\n  export interface Choice {\n    /**\n     * The reason the model stopped generating tokens. This will be `stop` if the model\n     * hit a natural stop point or a provided stop sequence, `length` if the maximum\n     * number of tokens specified in the request was reached, `content_filter` if\n     * content was omitted due to a flag from our content filters, or `function_call`\n     * if the model called a function.\n     */\n    finish_reason: 'stop' | 'length' | 'function_call' | 'content_filter';\n\n    /**\n     * The index of the choice in the list of choices.\n     */\n    index: number;\n\n    /**\n     * A chat completion message generated by the model.\n     */\n    message: ChatCompletionMessage;\n  }\n}\n\n/**\n * Represents a streamed chunk of a chat completion response returned by model,\n * based on the provided input.\n */\nexport interface ChatCompletionChunk {\n  /**\n   * A unique identifier for the chat completion chunk.\n   */\n  id: string;\n\n  /**\n   * A list of chat completion choices. Can be more than one if `n` is greater\n   * than 1.\n   */\n  choices: Array<ChatCompletionChunk.Choice>;\n\n  /**\n   * The Unix timestamp (in seconds) of when the chat completion chunk was created.\n   */\n  created: number;\n\n  /**\n   * The model to generate the completion.\n   */\n  model: string;\n\n  /**\n   * The object type, which is always `chat.completion.chunk`.\n   */\n  object: string;\n}\n\nexport namespace ChatCompletionChunk {\n  export interface Choice {\n    /**\n     * A chat completion delta generated by streamed model responses.\n     */\n    delta: Choice.Delta;\n\n    /**\n     * The reason the model stopped generating tokens. This will be `stop` if the model\n     * hit a natural stop point or a provided stop sequence, `length` if the maximum\n     * number of tokens specified in the request was reached, `content_filter` if\n     * content was omitted due to a flag from our content filters, or `function_call`\n     * if the model called a function.\n     */\n    finish_reason: 'stop' | 'length' | 'function_call' | 'content_filter' | null;\n\n    /**\n     * The index of the choice in the list of choices.\n     */\n    index: number;\n  }\n\n  export namespace Choice {\n    /**\n     * A chat completion delta generated by streamed model responses.\n     */\n    export interface Delta {\n      /**\n       * The contents of the chunk message.\n       */\n      content?: string | null;\n\n      /**\n       * The name and arguments of a function that should be called, as generated by the\n       * model.\n       */\n      function_call?: Delta.FunctionCall;\n\n      /**\n       * The role of the author of this message.\n       */\n      role?: ChatCompletionRole;\n    }\n\n    export namespace Delta {\n      /**\n       * The name and arguments of a function that should be called, as generated by the\n       * model.\n       */\n      export interface FunctionCall {\n        /**\n         * The arguments to call the function with, as generated by the model in JSON\n         * format. Note that the model does not always generate valid JSON, and may\n         * hallucinate parameters not defined by your function schema. Validate the\n         * arguments in your code before calling your function.\n         */\n        arguments?: string;\n\n        /**\n         * The name of the function to call.\n         */\n        name?: string;\n      }\n    }\n  }\n}\n\n/**\n * A chat completion message generated by the model.\n */\nexport interface ChatCompletionMessage {\n  /**\n   * The contents of the message.\n   */\n  content: string | null;\n\n  /**\n   * The role of the author of this message.\n   */\n  role: ChatCompletionRole;\n\n  /**\n   * The name and arguments of a function that should be called, as generated by the\n   * model.\n   */\n  function_call?: ChatCompletionMessage.FunctionCall;\n}\n\nexport namespace ChatCompletionMessage {\n  /**\n   * The name and arguments of a function that should be called, as generated by the\n   * model.\n   */\n  export interface FunctionCall {\n    /**\n     * The arguments to call the function with, as generated by the model in JSON\n     * format. Note that the model does not always generate valid JSON, and may\n     * hallucinate parameters not defined by your function schema. Validate the\n     * arguments in your code before calling your function.\n     */\n    arguments: string;\n\n    /**\n     * The name of the function to call.\n     */\n    name: string;\n  }\n}\n\nexport interface ChatCompletionMessageParam {\n  /**\n   * The contents of the message. `content` is required for all messages, and may be\n   * null for assistant messages with function calls.\n   */\n  content: string | null;\n\n  /**\n   * The role of the messages author. One of `system`, `user`, `assistant`, or\n   * `function`.\n   */\n  role: 'system' | 'user' | 'assistant' | 'function';\n\n  /**\n   * The name and arguments of a function that should be called, as generated by the\n   * model.\n   */\n  function_call?: ChatCompletionMessageParam.FunctionCall;\n\n  /**\n   * The name of the author of this message. `name` is required if role is\n   * `function`, and it should be the name of the function whose response is in the\n   * `content`. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of\n   * 64 characters.\n   */\n  name?: string;\n}\n\nexport namespace ChatCompletionMessageParam {\n  /**\n   * The name and arguments of a function that should be called, as generated by the\n   * model.\n   */\n  export interface FunctionCall {\n    /**\n     * The arguments to call the function with, as generated by the model in JSON\n     * format. Note that the model does not always generate valid JSON, and may\n     * hallucinate parameters not defined by your function schema. Validate the\n     * arguments in your code before calling your function.\n     */\n    arguments: string;\n\n    /**\n     * The name of the function to call.\n     */\n    name: string;\n  }\n}\n\n/**\n * The role of the author of this message.\n */\nexport type ChatCompletionRole = 'system' | 'user' | 'assistant' | 'function';\n\n/**\n * @deprecated ChatCompletionMessageParam should be used instead\n */\nexport type CreateChatCompletionRequestMessage = ChatCompletionMessageParam;\n\nexport type ChatCompletionCreateParams =\n  | ChatCompletionCreateParamsNonStreaming\n  | ChatCompletionCreateParamsStreaming;\n\nexport interface ChatCompletionCreateParamsBase {\n  /**\n   * A list of messages comprising the conversation so far.\n   * [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).\n   */\n  messages: Array<ChatCompletionMessageParam>;\n\n  /**\n   * ID of the model to use. See the\n   * [model endpoint compatibility](https://platform.openai.com/docs/models/model-endpoint-compatibility)\n   * table for details on which models work with the Chat API.\n   */\n  model:\n    | (string & {})\n    | 'gpt-4'\n    | 'gpt-4-0314'\n    | 'gpt-4-0613'\n    | 'gpt-4-32k'\n    | 'gpt-4-32k-0314'\n    | 'gpt-4-32k-0613'\n    | 'gpt-3.5-turbo'\n    | 'gpt-3.5-turbo-16k'\n    | 'gpt-3.5-turbo-0301'\n    | 'gpt-3.5-turbo-0613'\n    | 'gpt-3.5-turbo-16k-0613';\n\n  /**\n   * Number between -2.0 and 2.0. Positive values penalize new tokens based on their\n   * existing frequency in the text so far, decreasing the model's likelihood to\n   * repeat the same line verbatim.\n   *\n   * [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/gpt/parameter-details)\n   */\n  frequency_penalty?: number | null;\n\n  /**\n   * Controls how the model responds to function calls. `none` means the model does\n   * not call a function, and responds to the end-user. `auto` means the model can\n   * pick between an end-user or calling a function. Specifying a particular function\n   * via `{\"name\": \"my_function\"}` forces the model to call that function. `none` is\n   * the default when no functions are present. `auto` is the default if functions\n   * are present.\n   */\n  function_call?: 'none' | 'auto' | ChatCompletionCreateParams.FunctionCallOption;\n\n  /**\n   * A list of functions the model may generate JSON inputs for.\n   */\n  functions?: Array<ChatCompletionCreateParams.Function>;\n\n  /**\n   * Modify the likelihood of specified tokens appearing in the completion.\n   *\n   * Accepts a json object that maps tokens (specified by their token ID in the\n   * tokenizer) to an associated bias value from -100 to 100. Mathematically, the\n   * bias is added to the logits generated by the model prior to sampling. The exact\n   * effect will vary per model, but values between -1 and 1 should decrease or\n   * increase likelihood of selection; values like -100 or 100 should result in a ban\n   * or exclusive selection of the relevant token.\n   */\n  logit_bias?: Record<string, number> | null;\n\n  /**\n   * The maximum number of [tokens](/tokenizer) to generate in the chat completion.\n   *\n   * The total length of input tokens and generated tokens is limited by the model's\n   * context length.\n   * [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb)\n   * for counting tokens.\n   */\n  max_tokens?: number | null;\n\n  /**\n   * How many chat completion choices to generate for each input message.\n   */\n  n?: number | null;\n\n  /**\n   * Number between -2.0 and 2.0. Positive values penalize new tokens based on\n   * whether they appear in the text so far, increasing the model's likelihood to\n   * talk about new topics.\n   *\n   * [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/gpt/parameter-details)\n   */\n  presence_penalty?: number | null;\n\n  /**\n   * Up to 4 sequences where the API will stop generating further tokens.\n   */\n  stop?: string | null | Array<string>;\n\n  /**\n   * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be\n   * sent as data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available, with the stream terminated by a `data: [DONE]`\n   * message.\n   * [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).\n   */\n  stream?: boolean | null;\n\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n   * make the output more random, while lower values like 0.2 will make it more\n   * focused and deterministic.\n   *\n   * We generally recommend altering this or `top_p` but not both.\n   */\n  temperature?: number | null;\n\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the\n   * model considers the results of the tokens with top_p probability mass. So 0.1\n   * means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or `temperature` but not both.\n   */\n  top_p?: number | null;\n\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to monitor\n   * and detect abuse.\n   * [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n   */\n  user?: string;\n}\n\nexport namespace ChatCompletionCreateParams {\n  export interface FunctionCallOption {\n    /**\n     * The name of the function to call.\n     */\n    name: string;\n  }\n\n  export interface Function {\n    /**\n     * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain\n     * underscores and dashes, with a maximum length of 64.\n     */\n    name: string;\n\n    /**\n     * The parameters the functions accepts, described as a JSON Schema object. See the\n     * [guide](https://platform.openai.com/docs/guides/gpt/function-calling) for\n     * examples, and the\n     * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\n     * documentation about the format.\n     *\n     * To describe a function that accepts no parameters, provide the value\n     * `{\"type\": \"object\", \"properties\": {}}`.\n     */\n    parameters: Record<string, unknown>;\n\n    /**\n     * A description of what the function does, used by the model to choose when and\n     * how to call the function.\n     */\n    description?: string;\n  }\n\n  export type ChatCompletionCreateParamsNonStreaming = API.ChatCompletionCreateParamsNonStreaming;\n  export type ChatCompletionCreateParamsStreaming = API.ChatCompletionCreateParamsStreaming;\n}\n\n/**\n * @deprecated Use ChatCompletionCreateParams instead\n */\nexport type CompletionCreateParams = ChatCompletionCreateParams;\n\nexport interface ChatCompletionCreateParamsNonStreaming extends ChatCompletionCreateParamsBase {\n  /**\n   * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be\n   * sent as data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available, with the stream terminated by a `data: [DONE]`\n   * message.\n   * [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).\n   */\n  stream?: false | null;\n}\n\n/**\n * @deprecated Use ChatCompletionCreateParamsNonStreaming instead\n */\nexport type CompletionCreateParamsNonStreaming = ChatCompletionCreateParamsNonStreaming;\n\nexport interface ChatCompletionCreateParamsStreaming extends ChatCompletionCreateParamsBase {\n  /**\n   * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be\n   * sent as data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available, with the stream terminated by a `data: [DONE]`\n   * message.\n   * [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).\n   */\n  stream: true;\n}\n\n/**\n * @deprecated Use ChatCompletionCreateParamsStreaming instead\n */\nexport type CompletionCreateParamsStreaming = ChatCompletionCreateParamsStreaming;\n\nexport namespace Completions {\n  export import ChatCompletion = API.ChatCompletion;\n  export import ChatCompletionChunk = API.ChatCompletionChunk;\n  export import ChatCompletionMessage = API.ChatCompletionMessage;\n  export import ChatCompletionMessageParam = API.ChatCompletionMessageParam;\n  export import ChatCompletionRole = API.ChatCompletionRole;\n  export import CreateChatCompletionRequestMessage = API.CreateChatCompletionRequestMessage;\n  export import ChatCompletionCreateParams = API.ChatCompletionCreateParams;\n  export import CompletionCreateParams = API.CompletionCreateParams;\n  export import ChatCompletionCreateParamsNonStreaming = API.ChatCompletionCreateParamsNonStreaming;\n  export import CompletionCreateParamsNonStreaming = API.CompletionCreateParamsNonStreaming;\n  export import ChatCompletionCreateParamsStreaming = API.ChatCompletionCreateParamsStreaming;\n  export import CompletionCreateParamsStreaming = API.CompletionCreateParamsStreaming;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport { APIResource } from \"../../resource\";\nimport { Completions } from './completions';\nimport * as API from './index';\n\nexport class Chat extends APIResource {\n  completions: Completions = new Completions(this.client);\n}\n\nexport namespace Chat {\n  export import Completions = API.Completions;\n  export import ChatCompletion = API.ChatCompletion;\n  export import ChatCompletionChunk = API.ChatCompletionChunk;\n  export import ChatCompletionMessage = API.ChatCompletionMessage;\n  export import ChatCompletionMessageParam = API.ChatCompletionMessageParam;\n  export import ChatCompletionRole = API.ChatCompletionRole;\n  export import CreateChatCompletionRequestMessage = API.CreateChatCompletionRequestMessage;\n  export import ChatCompletionCreateParams = API.ChatCompletionCreateParams;\n  export import CompletionCreateParams = API.CompletionCreateParams;\n  export import ChatCompletionCreateParamsNonStreaming = API.ChatCompletionCreateParamsNonStreaming;\n  export import CompletionCreateParamsNonStreaming = API.CompletionCreateParamsNonStreaming;\n  export import ChatCompletionCreateParamsStreaming = API.ChatCompletionCreateParamsStreaming;\n  export import CompletionCreateParamsStreaming = API.CompletionCreateParamsStreaming;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../core\";\nimport { APIResource } from \"../resource\";\nimport * as Completions from \"./completions\";\nimport * as API from './index';\n\nexport class Edits extends APIResource {\n  /**\n   * Creates a new edit for the provided input, instruction, and parameters.\n   *\n   * @deprecated The Edits API is deprecated; please use Chat Completions instead.\n   *\n   * https://openai.com/blog/gpt-4-api-general-availability#deprecation-of-the-edits-api\n   */\n  create(body: EditCreateParams, options?: Core.RequestOptions): Core.APIPromise<Edit> {\n    return this.post('/edits', { body, ...options });\n  }\n}\n\nexport interface Edit {\n  /**\n   * A list of edit choices. Can be more than one if `n` is greater than 1.\n   */\n  choices: Array<Edit.Choice>;\n\n  /**\n   * The Unix timestamp (in seconds) of when the edit was created.\n   */\n  created: number;\n\n  /**\n   * The object type, which is always `edit`.\n   */\n  object: string;\n\n  /**\n   * Usage statistics for the completion request.\n   */\n  usage: Completions.CompletionUsage;\n}\n\nexport namespace Edit {\n  export interface Choice {\n    /**\n     * The reason the model stopped generating tokens. This will be `stop` if the model\n     * hit a natural stop point or a provided stop sequence, `length` if the maximum\n     * number of tokens specified in the request was reached, or `content_filter` if\n     * content was omitted due to a flag from our content filters.\n     */\n    finish_reason: 'stop' | 'length';\n\n    /**\n     * The index of the choice in the list of choices.\n     */\n    index: number;\n\n    /**\n     * The edited result.\n     */\n    text: string;\n  }\n}\n\nexport interface EditCreateParams {\n  /**\n   * The instruction that tells the model how to edit the prompt.\n   */\n  instruction: string;\n\n  /**\n   * ID of the model to use. You can use the `text-davinci-edit-001` or\n   * `code-davinci-edit-001` model with this endpoint.\n   */\n  model: (string & {}) | 'text-davinci-edit-001' | 'code-davinci-edit-001';\n\n  /**\n   * The input text to use as a starting point for the edit.\n   */\n  input?: string | null;\n\n  /**\n   * How many edits to generate for the input and instruction.\n   */\n  n?: number | null;\n\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n   * make the output more random, while lower values like 0.2 will make it more\n   * focused and deterministic.\n   *\n   * We generally recommend altering this or `top_p` but not both.\n   */\n  temperature?: number | null;\n\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the\n   * model considers the results of the tokens with top_p probability mass. So 0.1\n   * means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or `temperature` but not both.\n   */\n  top_p?: number | null;\n}\n\nexport namespace Edits {\n  export import Edit = API.Edit;\n  export import EditCreateParams = API.EditCreateParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../core\";\nimport { APIResource } from \"../resource\";\nimport * as API from './index';\n\nexport class Embeddings extends APIResource {\n  /**\n   * Creates an embedding vector representing the input text.\n   */\n  create(\n    body: EmbeddingCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<CreateEmbeddingResponse> {\n    return this.post('/embeddings', { body, ...options });\n  }\n}\n\nexport interface CreateEmbeddingResponse {\n  /**\n   * The list of embeddings generated by the model.\n   */\n  data: Array<Embedding>;\n\n  /**\n   * The name of the model used to generate the embedding.\n   */\n  model: string;\n\n  /**\n   * The object type, which is always \"embedding\".\n   */\n  object: string;\n\n  /**\n   * The usage information for the request.\n   */\n  usage: CreateEmbeddingResponse.Usage;\n}\n\nexport namespace CreateEmbeddingResponse {\n  /**\n   * The usage information for the request.\n   */\n  export interface Usage {\n    /**\n     * The number of tokens used by the prompt.\n     */\n    prompt_tokens: number;\n\n    /**\n     * The total number of tokens used by the request.\n     */\n    total_tokens: number;\n  }\n}\n\n/**\n * Represents an embedding vector returned by embedding endpoint.\n */\nexport interface Embedding {\n  /**\n   * The embedding vector, which is a list of floats. The length of vector depends on\n   * the model as listed in the\n   * [embedding guide](https://platform.openai.com/docs/guides/embeddings).\n   */\n  embedding: Array<number>;\n\n  /**\n   * The index of the embedding in the list of embeddings.\n   */\n  index: number;\n\n  /**\n   * The object type, which is always \"embedding\".\n   */\n  object: string;\n}\n\nexport interface EmbeddingCreateParams {\n  /**\n   * Input text to embed, encoded as a string or array of tokens. To embed multiple\n   * inputs in a single request, pass an array of strings or array of token arrays.\n   * Each input must not exceed the max input tokens for the model (8191 tokens for\n   * `text-embedding-ada-002`) and cannot be an empty string.\n   * [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb)\n   * for counting tokens.\n   */\n  input: string | Array<string> | Array<number> | Array<Array<number>>;\n\n  /**\n   * ID of the model to use. You can use the\n   * [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n   * see all of your available models, or see our\n   * [Model overview](https://platform.openai.com/docs/models/overview) for\n   * descriptions of them.\n   */\n  model: (string & {}) | 'text-embedding-ada-002';\n\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to monitor\n   * and detect abuse.\n   * [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n   */\n  user?: string;\n}\n\nexport namespace Embeddings {\n  export import CreateEmbeddingResponse = API.CreateEmbeddingResponse;\n  export import Embedding = API.Embedding;\n  export import EmbeddingCreateParams = API.EmbeddingCreateParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../core\";\nimport { APIResource } from \"../resource\";\nimport { sleep } from \"../core\";\nimport { APIConnectionTimeoutError } from \"../error\";\nimport * as API from './index';\nimport { type Uploadable, multipartFormRequestOptions } from \"../core\";\nimport { Page } from \"../pagination\";\n\nexport class Files extends APIResource {\n  /**\n   * Upload a file that contains document(s) to be used across various\n   * endpoints/features. Currently, the size of all the files uploaded by one\n   * organization can be up to 1 GB. Please contact us if you need to increase the\n   * storage limit.\n   */\n  create(body: FileCreateParams, options?: Core.RequestOptions): Core.APIPromise<FileObject> {\n    return this.post('/files', multipartFormRequestOptions({ body, ...options }));\n  }\n\n  /**\n   * Returns information about a specific file.\n   */\n  retrieve(fileId: string, options?: Core.RequestOptions): Core.APIPromise<FileObject> {\n    return this.get(`/files/${fileId}`, options);\n  }\n\n  /**\n   * Returns a list of files that belong to the user's organization.\n   */\n  list(options?: Core.RequestOptions): Core.PagePromise<FileObjectsPage, FileObject> {\n    return this.getAPIList('/files', FileObjectsPage, options);\n  }\n\n  /**\n   * Delete a file.\n   */\n  del(fileId: string, options?: Core.RequestOptions): Core.APIPromise<FileDeleted> {\n    return this.delete(`/files/${fileId}`, options);\n  }\n\n  /**\n   * Returns the contents of the specified file.\n   */\n  retrieveContent(fileId: string, options?: Core.RequestOptions): Core.APIPromise<string> {\n    return this.get(`/files/${fileId}/content`, {\n      ...options,\n      headers: { Accept: 'application/json', ...options?.headers },\n    });\n  }\n\n  /**\n   * Waits for the given file to be processed, default timeout is 30 mins.\n   */\n  async waitForProcessing(\n    id: string,\n    { pollInterval = 5000, maxWait = 30 * 60 * 1000 }: { pollInterval?: number; maxWait?: number } = {},\n  ): Promise<FileObject> {\n    const TERMINAL_STATES = new Set(['processed', 'error', 'deleted']);\n\n    const start = Date.now();\n    let file = await this.retrieve(id);\n\n    while (!file.status || !TERMINAL_STATES.has(file.status)) {\n      await sleep(pollInterval);\n\n      file = await this.retrieve(id);\n      if (Date.now() - start > maxWait) {\n        throw new APIConnectionTimeoutError({\n          message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`,\n        });\n      }\n    }\n\n    return file;\n  }\n}\n\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class FileObjectsPage extends Page<FileObject> {}\n// alias so we can export it in the namespace\ntype _FileObjectsPage = FileObjectsPage;\n\nexport type FileContent = string;\n\nexport interface FileDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: string;\n}\n\n/**\n * The `File` object represents a document that has been uploaded to OpenAI.\n */\nexport interface FileObject {\n  /**\n   * The file identifier, which can be referenced in the API endpoints.\n   */\n  id: string;\n\n  /**\n   * The size of the file in bytes.\n   */\n  bytes: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the file was created.\n   */\n  created_at: number;\n\n  /**\n   * The name of the file.\n   */\n  filename: string;\n\n  /**\n   * The object type, which is always \"file\".\n   */\n  object: string;\n\n  /**\n   * The intended purpose of the file. Currently, only \"fine-tune\" is supported.\n   */\n  purpose: string;\n\n  /**\n   * The current status of the file, which can be either `uploaded`, `processed`,\n   * `pending`, `error`, `deleting` or `deleted`.\n   */\n  status?: string;\n\n  /**\n   * Additional details about the status of the file. If the file is in the `error`\n   * state, this will include a message describing the error.\n   */\n  status_details?: string | null;\n}\n\nexport interface FileCreateParams {\n  /**\n   * Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be\n   * uploaded.\n   *\n   * If the `purpose` is set to \"fine-tune\", the file will be used for fine-tuning.\n   */\n  file: Uploadable;\n\n  /**\n   * The intended purpose of the uploaded documents.\n   *\n   * Use \"fine-tune\" for\n   * [fine-tuning](https://platform.openai.com/docs/api-reference/fine-tuning). This\n   * allows us to validate the format of the uploaded file.\n   */\n  purpose: string;\n}\n\nexport namespace Files {\n  export import FileContent = API.FileContent;\n  export import FileDeleted = API.FileDeleted;\n  export import FileObject = API.FileObject;\n  export type FileObjectsPage = _FileObjectsPage;\n  export import FileCreateParams = API.FileCreateParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../core\";\nimport { APIResource } from \"../resource\";\nimport * as API from './index';\nimport { type Uploadable, multipartFormRequestOptions } from \"../core\";\n\nexport class Images extends APIResource {\n  /**\n   * Creates a variation of a given image.\n   */\n  createVariation(\n    body: ImageCreateVariationParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ImagesResponse> {\n    return this.post('/images/variations', multipartFormRequestOptions({ body, ...options }));\n  }\n\n  /**\n   * Creates an edited or extended image given an original image and a prompt.\n   */\n  edit(body: ImageEditParams, options?: Core.RequestOptions): Core.APIPromise<ImagesResponse> {\n    return this.post('/images/edits', multipartFormRequestOptions({ body, ...options }));\n  }\n\n  /**\n   * Creates an image given a prompt.\n   */\n  generate(body: ImageGenerateParams, options?: Core.RequestOptions): Core.APIPromise<ImagesResponse> {\n    return this.post('/images/generations', { body, ...options });\n  }\n}\n\n/**\n * Represents the url or the content of an image generated by the OpenAI API.\n */\nexport interface Image {\n  /**\n   * The base64-encoded JSON of the generated image, if `response_format` is\n   * `b64_json`.\n   */\n  b64_json?: string;\n\n  /**\n   * The URL of the generated image, if `response_format` is `url` (default).\n   */\n  url?: string;\n}\n\nexport interface ImagesResponse {\n  created: number;\n\n  data: Array<Image>;\n}\n\nexport interface ImageCreateVariationParams {\n  /**\n   * The image to use as the basis for the variation(s). Must be a valid PNG file,\n   * less than 4MB, and square.\n   */\n  image: Uploadable;\n\n  /**\n   * The number of images to generate. Must be between 1 and 10.\n   */\n  n?: number | null;\n\n  /**\n   * The format in which the generated images are returned. Must be one of `url` or\n   * `b64_json`.\n   */\n  response_format?: 'url' | 'b64_json' | null;\n\n  /**\n   * The size of the generated images. Must be one of `256x256`, `512x512`, or\n   * `1024x1024`.\n   */\n  size?: '256x256' | '512x512' | '1024x1024' | null;\n\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to monitor\n   * and detect abuse.\n   * [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n   */\n  user?: string;\n}\n\nexport interface ImageEditParams {\n  /**\n   * The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask\n   * is not provided, image must have transparency, which will be used as the mask.\n   */\n  image: Uploadable;\n\n  /**\n   * A text description of the desired image(s). The maximum length is 1000\n   * characters.\n   */\n  prompt: string;\n\n  /**\n   * An additional image whose fully transparent areas (e.g. where alpha is zero)\n   * indicate where `image` should be edited. Must be a valid PNG file, less than\n   * 4MB, and have the same dimensions as `image`.\n   */\n  mask?: Uploadable;\n\n  /**\n   * The number of images to generate. Must be between 1 and 10.\n   */\n  n?: number | null;\n\n  /**\n   * The format in which the generated images are returned. Must be one of `url` or\n   * `b64_json`.\n   */\n  response_format?: 'url' | 'b64_json' | null;\n\n  /**\n   * The size of the generated images. Must be one of `256x256`, `512x512`, or\n   * `1024x1024`.\n   */\n  size?: '256x256' | '512x512' | '1024x1024' | null;\n\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to monitor\n   * and detect abuse.\n   * [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n   */\n  user?: string;\n}\n\nexport interface ImageGenerateParams {\n  /**\n   * A text description of the desired image(s). The maximum length is 1000\n   * characters.\n   */\n  prompt: string;\n\n  /**\n   * The number of images to generate. Must be between 1 and 10.\n   */\n  n?: number | null;\n\n  /**\n   * The format in which the generated images are returned. Must be one of `url` or\n   * `b64_json`.\n   */\n  response_format?: 'url' | 'b64_json' | null;\n\n  /**\n   * The size of the generated images. Must be one of `256x256`, `512x512`, or\n   * `1024x1024`.\n   */\n  size?: '256x256' | '512x512' | '1024x1024' | null;\n\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to monitor\n   * and detect abuse.\n   * [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n   */\n  user?: string;\n}\n\nexport namespace Images {\n  export import Image = API.Image;\n  export import ImagesResponse = API.ImagesResponse;\n  export import ImageCreateVariationParams = API.ImageCreateVariationParams;\n  export import ImageEditParams = API.ImageEditParams;\n  export import ImageGenerateParams = API.ImageGenerateParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../core\";\nimport { APIResource } from \"../../resource\";\nimport * as API from './index';\nimport { type Uploadable, multipartFormRequestOptions } from \"../../core\";\n\nexport class Transcriptions extends APIResource {\n  /**\n   * Transcribes audio into the input language.\n   */\n  create(body: TranscriptionCreateParams, options?: Core.RequestOptions): Core.APIPromise<Transcription> {\n    return this.post('/audio/transcriptions', multipartFormRequestOptions({ body, ...options }));\n  }\n}\n\nexport interface Transcription {\n  text: string;\n}\n\nexport interface TranscriptionCreateParams {\n  /**\n   * The audio file object (not file name) to transcribe, in one of these formats:\n   * flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n   */\n  file: Uploadable;\n\n  /**\n   * ID of the model to use. Only `whisper-1` is currently available.\n   */\n  model: (string & {}) | 'whisper-1';\n\n  /**\n   * The language of the input audio. Supplying the input language in\n   * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will\n   * improve accuracy and latency.\n   */\n  language?: string;\n\n  /**\n   * An optional text to guide the model's style or continue a previous audio\n   * segment. The\n   * [prompt](https://platform.openai.com/docs/guides/speech-to-text/prompting)\n   * should match the audio language.\n   */\n  prompt?: string;\n\n  /**\n   * The format of the transcript output, in one of these options: json, text, srt,\n   * verbose_json, or vtt.\n   */\n  response_format?: 'json' | 'text' | 'srt' | 'verbose_json' | 'vtt';\n\n  /**\n   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n   * output more random, while lower values like 0.2 will make it more focused and\n   * deterministic. If set to 0, the model will use\n   * [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n   * automatically increase the temperature until certain thresholds are hit.\n   */\n  temperature?: number;\n}\n\nexport namespace Transcriptions {\n  export import Transcription = API.Transcription;\n  export import TranscriptionCreateParams = API.TranscriptionCreateParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../core\";\nimport { APIResource } from \"../../resource\";\nimport * as API from './index';\nimport { type Uploadable, multipartFormRequestOptions } from \"../../core\";\n\nexport class Translations extends APIResource {\n  /**\n   * Translates audio into English.\n   */\n  create(body: TranslationCreateParams, options?: Core.RequestOptions): Core.APIPromise<Translation> {\n    return this.post('/audio/translations', multipartFormRequestOptions({ body, ...options }));\n  }\n}\n\nexport interface Translation {\n  text: string;\n}\n\nexport interface TranslationCreateParams {\n  /**\n   * The audio file object (not file name) translate, in one of these formats: flac,\n   * mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n   */\n  file: Uploadable;\n\n  /**\n   * ID of the model to use. Only `whisper-1` is currently available.\n   */\n  model: (string & {}) | 'whisper-1';\n\n  /**\n   * An optional text to guide the model's style or continue a previous audio\n   * segment. The\n   * [prompt](https://platform.openai.com/docs/guides/speech-to-text/prompting)\n   * should be in English.\n   */\n  prompt?: string;\n\n  /**\n   * The format of the transcript output, in one of these options: json, text, srt,\n   * verbose_json, or vtt.\n   */\n  response_format?: string;\n\n  /**\n   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n   * output more random, while lower values like 0.2 will make it more focused and\n   * deterministic. If set to 0, the model will use\n   * [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n   * automatically increase the temperature until certain thresholds are hit.\n   */\n  temperature?: number;\n}\n\nexport namespace Translations {\n  export import Translation = API.Translation;\n  export import TranslationCreateParams = API.TranslationCreateParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport { APIResource } from \"../../resource\";\nimport { Transcriptions } from './transcriptions';\nimport { Translations } from './translations';\nimport * as API from './index';\n\nexport class Audio extends APIResource {\n  transcriptions: Transcriptions = new Transcriptions(this.client);\n  translations: Translations = new Translations(this.client);\n}\n\nexport namespace Audio {\n  export import Transcriptions = API.Transcriptions;\n  export import Transcription = API.Transcription;\n  export import TranscriptionCreateParams = API.TranscriptionCreateParams;\n\n  export import Translations = API.Translations;\n  export import Translation = API.Translation;\n  export import TranslationCreateParams = API.TranslationCreateParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../core\";\nimport { APIResource } from \"../resource\";\nimport * as API from './index';\n\nexport class Moderations extends APIResource {\n  /**\n   * Classifies if text violates OpenAI's Content Policy\n   */\n  create(\n    body: ModerationCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ModerationCreateResponse> {\n    return this.post('/moderations', { body, ...options });\n  }\n}\n\nexport interface Moderation {\n  /**\n   * A list of the categories, and whether they are flagged or not.\n   */\n  categories: Moderation.Categories;\n\n  /**\n   * A list of the categories along with their scores as predicted by model.\n   */\n  category_scores: Moderation.CategoryScores;\n\n  /**\n   * Whether the content violates\n   * [OpenAI's usage policies](/policies/usage-policies).\n   */\n  flagged: boolean;\n}\n\nexport namespace Moderation {\n  /**\n   * A list of the categories, and whether they are flagged or not.\n   */\n  export interface Categories {\n    /**\n     * Content that expresses, incites, or promotes harassing language towards any\n     * target.\n     */\n    harassment: boolean;\n\n    /**\n     * Harassment content that also includes violence or serious harm towards any\n     * target.\n     */\n    'harassment/threatening': boolean;\n\n    /**\n     * Content that expresses, incites, or promotes hate based on race, gender,\n     * ethnicity, religion, nationality, sexual orientation, disability status, or\n     * caste. Hateful content aimed at non-protected groups (e.g., chess players) is\n     * harrassment.\n     */\n    hate: boolean;\n\n    /**\n     * Hateful content that also includes violence or serious harm towards the targeted\n     * group based on race, gender, ethnicity, religion, nationality, sexual\n     * orientation, disability status, or caste.\n     */\n    'hate/threatening': boolean;\n\n    /**\n     * Content that promotes, encourages, or depicts acts of self-harm, such as\n     * suicide, cutting, and eating disorders.\n     */\n    'self-harm': boolean;\n\n    /**\n     * Content that encourages performing acts of self-harm, such as suicide, cutting,\n     * and eating disorders, or that gives instructions or advice on how to commit such\n     * acts.\n     */\n    'self-harm/instructions': boolean;\n\n    /**\n     * Content where the speaker expresses that they are engaging or intend to engage\n     * in acts of self-harm, such as suicide, cutting, and eating disorders.\n     */\n    'self-harm/intent': boolean;\n\n    /**\n     * Content meant to arouse sexual excitement, such as the description of sexual\n     * activity, or that promotes sexual services (excluding sex education and\n     * wellness).\n     */\n    sexual: boolean;\n\n    /**\n     * Sexual content that includes an individual who is under 18 years old.\n     */\n    'sexual/minors': boolean;\n\n    /**\n     * Content that depicts death, violence, or physical injury.\n     */\n    violence: boolean;\n\n    /**\n     * Content that depicts death, violence, or physical injury in graphic detail.\n     */\n    'violence/graphic': boolean;\n  }\n\n  /**\n   * A list of the categories along with their scores as predicted by model.\n   */\n  export interface CategoryScores {\n    /**\n     * The score for the category 'harassment'.\n     */\n    harassment: number;\n\n    /**\n     * The score for the category 'harassment/threatening'.\n     */\n    'harassment/threatening': number;\n\n    /**\n     * The score for the category 'hate'.\n     */\n    hate: number;\n\n    /**\n     * The score for the category 'hate/threatening'.\n     */\n    'hate/threatening': number;\n\n    /**\n     * The score for the category 'self-harm'.\n     */\n    'self-harm': number;\n\n    /**\n     * The score for the category 'self-harm/instructions'.\n     */\n    'self-harm/instructions': number;\n\n    /**\n     * The score for the category 'self-harm/intent'.\n     */\n    'self-harm/intent': number;\n\n    /**\n     * The score for the category 'sexual'.\n     */\n    sexual: number;\n\n    /**\n     * The score for the category 'sexual/minors'.\n     */\n    'sexual/minors': number;\n\n    /**\n     * The score for the category 'violence'.\n     */\n    violence: number;\n\n    /**\n     * The score for the category 'violence/graphic'.\n     */\n    'violence/graphic': number;\n  }\n}\n\n/**\n * Represents policy compliance report by OpenAI's content moderation model against\n * a given input.\n */\nexport interface ModerationCreateResponse {\n  /**\n   * The unique identifier for the moderation request.\n   */\n  id: string;\n\n  /**\n   * The model used to generate the moderation results.\n   */\n  model: string;\n\n  /**\n   * A list of moderation objects.\n   */\n  results: Array<Moderation>;\n}\n\nexport interface ModerationCreateParams {\n  /**\n   * The input text to classify\n   */\n  input: string | Array<string>;\n\n  /**\n   * Two content moderations models are available: `text-moderation-stable` and\n   * `text-moderation-latest`.\n   *\n   * The default is `text-moderation-latest` which will be automatically upgraded\n   * over time. This ensures you are always using our most accurate model. If you use\n   * `text-moderation-stable`, we will provide advanced notice before updating the\n   * model. Accuracy of `text-moderation-stable` may be slightly lower than for\n   * `text-moderation-latest`.\n   */\n  model?: (string & {}) | 'text-moderation-latest' | 'text-moderation-stable';\n}\n\nexport namespace Moderations {\n  export import Moderation = API.Moderation;\n  export import ModerationCreateResponse = API.ModerationCreateResponse;\n  export import ModerationCreateParams = API.ModerationCreateParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../core\";\nimport { APIResource } from \"../resource\";\nimport * as API from './index';\nimport { Page } from \"../pagination\";\n\nexport class Models extends APIResource {\n  /**\n   * Retrieves a model instance, providing basic information about the model such as\n   * the owner and permissioning.\n   */\n  retrieve(model: string, options?: Core.RequestOptions): Core.APIPromise<Model> {\n    return this.get(`/models/${model}`, options);\n  }\n\n  /**\n   * Lists the currently available models, and provides basic information about each\n   * one such as the owner and availability.\n   */\n  list(options?: Core.RequestOptions): Core.PagePromise<ModelsPage, Model> {\n    return this.getAPIList('/models', ModelsPage, options);\n  }\n\n  /**\n   * Delete a fine-tuned model. You must have the Owner role in your organization to\n   * delete a model.\n   */\n  del(model: string, options?: Core.RequestOptions): Core.APIPromise<ModelDeleted> {\n    return this.delete(`/models/${model}`, options);\n  }\n}\n\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class ModelsPage extends Page<Model> {}\n// alias so we can export it in the namespace\ntype _ModelsPage = ModelsPage;\n\n/**\n * Describes an OpenAI model offering that can be used with the API.\n */\nexport interface Model {\n  /**\n   * The model identifier, which can be referenced in the API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) when the model was created.\n   */\n  created: number;\n\n  /**\n   * The object type, which is always \"model\".\n   */\n  object: string;\n\n  /**\n   * The organization that owns the model.\n   */\n  owned_by: string;\n}\n\nexport interface ModelDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: string;\n}\n\nexport namespace Models {\n  export import Model = API.Model;\n  export import ModelDeleted = API.ModelDeleted;\n  export type ModelsPage = _ModelsPage;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../core\";\nimport { APIResource } from \"../../resource\";\nimport { isRequestOptions } from \"../../core\";\nimport * as API from './index';\nimport { CursorPage, CursorPageParams } from \"../../pagination\";\n\nexport class Jobs extends APIResource {\n  /**\n   * Creates a job that fine-tunes a specified model from a given dataset.\n   *\n   * Response includes details of the enqueued job including job status and the name\n   * of the fine-tuned models once complete.\n   *\n   * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n   */\n  create(body: JobCreateParams, options?: Core.RequestOptions): Core.APIPromise<FineTuningJob> {\n    return this.post('/fine_tuning/jobs', { body, ...options });\n  }\n\n  /**\n   * Get info about a fine-tuning job.\n   *\n   * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n   */\n  retrieve(fineTuningJobId: string, options?: Core.RequestOptions): Core.APIPromise<FineTuningJob> {\n    return this.get(`/fine_tuning/jobs/${fineTuningJobId}`, options);\n  }\n\n  /**\n   * List your organization's fine-tuning jobs\n   */\n  list(\n    query?: JobListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FineTuningJobsPage, FineTuningJob>;\n  list(options?: Core.RequestOptions): Core.PagePromise<FineTuningJobsPage, FineTuningJob>;\n  list(\n    query: JobListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FineTuningJobsPage, FineTuningJob> {\n    if (isRequestOptions(query)) {\n      return this.list({}, query);\n    }\n    return this.getAPIList('/fine_tuning/jobs', FineTuningJobsPage, { query, ...options });\n  }\n\n  /**\n   * Immediately cancel a fine-tune job.\n   */\n  cancel(fineTuningJobId: string, options?: Core.RequestOptions): Core.APIPromise<FineTuningJob> {\n    return this.post(`/fine_tuning/jobs/${fineTuningJobId}/cancel`, options);\n  }\n\n  /**\n   * Get status updates for a fine-tuning job.\n   */\n  listEvents(\n    fineTuningJobId: string,\n    query?: JobListEventsParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FineTuningJobEventsPage, FineTuningJobEvent>;\n  listEvents(\n    fineTuningJobId: string,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FineTuningJobEventsPage, FineTuningJobEvent>;\n  listEvents(\n    fineTuningJobId: string,\n    query: JobListEventsParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FineTuningJobEventsPage, FineTuningJobEvent> {\n    if (isRequestOptions(query)) {\n      return this.listEvents(fineTuningJobId, {}, query);\n    }\n    return this.getAPIList(`/fine_tuning/jobs/${fineTuningJobId}/events`, FineTuningJobEventsPage, {\n      query,\n      ...options,\n    });\n  }\n}\n\nexport class FineTuningJobsPage extends CursorPage<FineTuningJob> {}\n// alias so we can export it in the namespace\ntype _FineTuningJobsPage = FineTuningJobsPage;\n\nexport class FineTuningJobEventsPage extends CursorPage<FineTuningJobEvent> {}\n// alias so we can export it in the namespace\ntype _FineTuningJobEventsPage = FineTuningJobEventsPage;\n\n/**\n * The `fine_tuning.job` object represents a fine-tuning job that has been created\n * through the API.\n */\nexport interface FineTuningJob {\n  /**\n   * The object identifier, which can be referenced in the API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the fine-tuning job was created.\n   */\n  created_at: number;\n\n  /**\n   * For fine-tuning jobs that have `failed`, this will contain more information on\n   * the cause of the failure.\n   */\n  error: FineTuningJob.Error | null;\n\n  /**\n   * The name of the fine-tuned model that is being created. The value will be null\n   * if the fine-tuning job is still running.\n   */\n  fine_tuned_model: string | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the fine-tuning job was finished. The\n   * value will be null if the fine-tuning job is still running.\n   */\n  finished_at: number | null;\n\n  /**\n   * The hyperparameters used for the fine-tuning job. See the\n   * [fine-tuning guide](https://platform.openai.com/docs/guides/fine-tuning) for\n   * more details.\n   */\n  hyperparameters: FineTuningJob.Hyperparameters;\n\n  /**\n   * The base model that is being fine-tuned.\n   */\n  model: string;\n\n  /**\n   * The object type, which is always \"fine_tuning.job\".\n   */\n  object: string;\n\n  /**\n   * The organization that owns the fine-tuning job.\n   */\n  organization_id: string;\n\n  /**\n   * The compiled results file ID(s) for the fine-tuning job. You can retrieve the\n   * results with the\n   * [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents).\n   */\n  result_files: Array<string>;\n\n  /**\n   * The current status of the fine-tuning job, which can be either\n   * `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.\n   */\n  status: string;\n\n  /**\n   * The total number of billable tokens processed by this fine-tuning job. The value\n   * will be null if the fine-tuning job is still running.\n   */\n  trained_tokens: number | null;\n\n  /**\n   * The file ID used for training. You can retrieve the training data with the\n   * [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents).\n   */\n  training_file: string;\n\n  /**\n   * The file ID used for validation. You can retrieve the validation results with\n   * the\n   * [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents).\n   */\n  validation_file: string | null;\n}\n\nexport namespace FineTuningJob {\n  /**\n   * For fine-tuning jobs that have `failed`, this will contain more information on\n   * the cause of the failure.\n   */\n  export interface Error {\n    /**\n     * A machine-readable error code.\n     */\n    code: string;\n\n    /**\n     * A human-readable error message.\n     */\n    message: string;\n\n    /**\n     * The parameter that was invalid, usually `training_file` or `validation_file`.\n     * This field will be null if the failure was not parameter-specific.\n     */\n    param: string | null;\n  }\n\n  /**\n   * The hyperparameters used for the fine-tuning job. See the\n   * [fine-tuning guide](https://platform.openai.com/docs/guides/fine-tuning) for\n   * more details.\n   */\n  export interface Hyperparameters {\n    /**\n     * The number of epochs to train the model for. An epoch refers to one full cycle\n     * through the training dataset. \"auto\" decides the optimal number of epochs based\n     * on the size of the dataset. If setting the number manually, we support any\n     * number between 1 and 50 epochs.\n     */\n    n_epochs: 'auto' | number;\n  }\n}\n\nexport interface FineTuningJobEvent {\n  id: string;\n\n  created_at: number;\n\n  level: 'info' | 'warn' | 'error';\n\n  message: string;\n\n  object: string;\n}\n\nexport interface JobCreateParams {\n  /**\n   * The name of the model to fine-tune. You can select one of the\n   * [supported models](https://platform.openai.com/docs/guides/fine-tuning/what-models-can-be-fine-tuned).\n   */\n  model: (string & {}) | 'babbage-002' | 'davinci-002' | 'gpt-3.5-turbo';\n\n  /**\n   * The ID of an uploaded file that contains training data.\n   *\n   * See [upload file](https://platform.openai.com/docs/api-reference/files/upload)\n   * for how to upload a file.\n   *\n   * Your dataset must be formatted as a JSONL file. Additionally, you must upload\n   * your file with the purpose `fine-tune`.\n   *\n   * See the [fine-tuning guide](https://platform.openai.com/docs/guides/fine-tuning)\n   * for more details.\n   */\n  training_file: string;\n\n  /**\n   * The hyperparameters used for the fine-tuning job.\n   */\n  hyperparameters?: JobCreateParams.Hyperparameters;\n\n  /**\n   * A string of up to 18 characters that will be added to your fine-tuned model\n   * name.\n   *\n   * For example, a `suffix` of \"custom-model-name\" would produce a model name like\n   * `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`.\n   */\n  suffix?: string | null;\n\n  /**\n   * The ID of an uploaded file that contains validation data.\n   *\n   * If you provide this file, the data is used to generate validation metrics\n   * periodically during fine-tuning. These metrics can be viewed in the fine-tuning\n   * results file. The same data should not be present in both train and validation\n   * files.\n   *\n   * Your dataset must be formatted as a JSONL file. You must upload your file with\n   * the purpose `fine-tune`.\n   *\n   * See the [fine-tuning guide](https://platform.openai.com/docs/guides/fine-tuning)\n   * for more details.\n   */\n  validation_file?: string | null;\n}\n\nexport namespace JobCreateParams {\n  /**\n   * The hyperparameters used for the fine-tuning job.\n   */\n  export interface Hyperparameters {\n    /**\n     * The number of epochs to train the model for. An epoch refers to one full cycle\n     * through the training dataset.\n     */\n    n_epochs?: 'auto' | number;\n  }\n}\n\nexport interface JobListParams extends CursorPageParams {}\n\nexport interface JobListEventsParams extends CursorPageParams {}\n\nexport namespace Jobs {\n  export import FineTuningJob = API.FineTuningJob;\n  export import FineTuningJobEvent = API.FineTuningJobEvent;\n  export type FineTuningJobsPage = _FineTuningJobsPage;\n  export type FineTuningJobEventsPage = _FineTuningJobEventsPage;\n  export import JobCreateParams = API.JobCreateParams;\n  export import JobListParams = API.JobListParams;\n  export import JobListEventsParams = API.JobListEventsParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport { APIResource } from \"../../resource\";\nimport { Jobs } from './jobs';\nimport * as API from './index';\n\nexport class FineTuning extends APIResource {\n  jobs: Jobs = new Jobs(this.client);\n}\n\nexport namespace FineTuning {\n  export import Jobs = API.Jobs;\n  export import FineTuningJob = API.FineTuningJob;\n  export import FineTuningJobEvent = API.FineTuningJobEvent;\n  export import FineTuningJobsPage = API.FineTuningJobsPage;\n  export import FineTuningJobEventsPage = API.FineTuningJobEventsPage;\n  export import JobCreateParams = API.JobCreateParams;\n  export import JobListParams = API.JobListParams;\n  export import JobListEventsParams = API.JobListEventsParams;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../core\";\nimport { APIPromise } from \"../core\";\nimport { APIResource } from \"../resource\";\nimport * as Files from \"./files\";\nimport * as API from './index';\nimport { Page } from \"../pagination\";\nimport { Stream } from \"../streaming\";\n\nexport class FineTunes extends APIResource {\n  /**\n   * Creates a job that fine-tunes a specified model from a given dataset.\n   *\n   * Response includes details of the enqueued job including job status and the name\n   * of the fine-tuned models once complete.\n   *\n   * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/legacy-fine-tuning)\n   */\n  create(body: FineTuneCreateParams, options?: Core.RequestOptions): Core.APIPromise<FineTune> {\n    return this.post('/fine-tunes', { body, ...options });\n  }\n\n  /**\n   * Gets info about the fine-tune job.\n   *\n   * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/legacy-fine-tuning)\n   */\n  retrieve(fineTuneId: string, options?: Core.RequestOptions): Core.APIPromise<FineTune> {\n    return this.get(`/fine-tunes/${fineTuneId}`, options);\n  }\n\n  /**\n   * List your organization's fine-tuning jobs\n   */\n  list(options?: Core.RequestOptions): Core.PagePromise<FineTunesPage, FineTune> {\n    return this.getAPIList('/fine-tunes', FineTunesPage, options);\n  }\n\n  /**\n   * Immediately cancel a fine-tune job.\n   */\n  cancel(fineTuneId: string, options?: Core.RequestOptions): Core.APIPromise<FineTune> {\n    return this.post(`/fine-tunes/${fineTuneId}/cancel`, options);\n  }\n\n  /**\n   * Get fine-grained status updates for a fine-tune job.\n   */\n  listEvents(\n    fineTuneId: string,\n    query?: FineTuneListEventsParamsNonStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<FineTuneEventsListResponse>;\n  listEvents(\n    fineTuneId: string,\n    query: FineTuneListEventsParamsStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<FineTuneEvent>>;\n  listEvents(\n    fineTuneId: string,\n    query?: FineTuneListEventsParamsBase | undefined,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<FineTuneEvent> | FineTuneEventsListResponse>;\n  listEvents(\n    fineTuneId: string,\n    query?: FineTuneListEventsParams | undefined,\n    options?: Core.RequestOptions,\n  ): APIPromise<FineTuneEventsListResponse> | APIPromise<Stream<FineTuneEvent>> {\n    return this.get(`/fine-tunes/${fineTuneId}/events`, {\n      query,\n      timeout: 86400000,\n      ...options,\n      stream: query?.stream ?? false,\n    }) as APIPromise<FineTuneEventsListResponse> | APIPromise<Stream<FineTuneEvent>>;\n  }\n}\n\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class FineTunesPage extends Page<FineTune> {}\n// alias so we can export it in the namespace\ntype _FineTunesPage = FineTunesPage;\n\n/**\n * The `FineTune` object represents a legacy fine-tune job that has been created\n * through the API.\n */\nexport interface FineTune {\n  /**\n   * The object identifier, which can be referenced in the API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the fine-tuning job was created.\n   */\n  created_at: number;\n\n  /**\n   * The name of the fine-tuned model that is being created.\n   */\n  fine_tuned_model: string | null;\n\n  /**\n   * The hyperparameters used for the fine-tuning job. See the\n   * [fine-tuning guide](https://platform.openai.com/docs/guides/legacy-fine-tuning/hyperparameters)\n   * for more details.\n   */\n  hyperparams: FineTune.Hyperparams;\n\n  /**\n   * The base model that is being fine-tuned.\n   */\n  model: string;\n\n  /**\n   * The object type, which is always \"fine-tune\".\n   */\n  object: string;\n\n  /**\n   * The organization that owns the fine-tuning job.\n   */\n  organization_id: string;\n\n  /**\n   * The compiled results files for the fine-tuning job.\n   */\n  result_files: Array<Files.FileObject>;\n\n  /**\n   * The current status of the fine-tuning job, which can be either `created`,\n   * `running`, `succeeded`, `failed`, or `cancelled`.\n   */\n  status: string;\n\n  /**\n   * The list of files used for training.\n   */\n  training_files: Array<Files.FileObject>;\n\n  /**\n   * The Unix timestamp (in seconds) for when the fine-tuning job was last updated.\n   */\n  updated_at: number;\n\n  /**\n   * The list of files used for validation.\n   */\n  validation_files: Array<Files.FileObject>;\n\n  /**\n   * The list of events that have been observed in the lifecycle of the FineTune job.\n   */\n  events?: Array<FineTuneEvent>;\n}\n\nexport namespace FineTune {\n  /**\n   * The hyperparameters used for the fine-tuning job. See the\n   * [fine-tuning guide](https://platform.openai.com/docs/guides/legacy-fine-tuning/hyperparameters)\n   * for more details.\n   */\n  export interface Hyperparams {\n    /**\n     * The batch size to use for training. The batch size is the number of training\n     * examples used to train a single forward and backward pass.\n     */\n    batch_size: number;\n\n    /**\n     * The learning rate multiplier to use for training.\n     */\n    learning_rate_multiplier: number;\n\n    /**\n     * The number of epochs to train the model for. An epoch refers to one full cycle\n     * through the training dataset.\n     */\n    n_epochs: number;\n\n    /**\n     * The weight to use for loss on the prompt tokens.\n     */\n    prompt_loss_weight: number;\n\n    /**\n     * The number of classes to use for computing classification metrics.\n     */\n    classification_n_classes?: number;\n\n    /**\n     * The positive class to use for computing classification metrics.\n     */\n    classification_positive_class?: string;\n\n    /**\n     * The classification metrics to compute using the validation dataset at the end of\n     * every epoch.\n     */\n    compute_classification_metrics?: boolean;\n  }\n}\n\nexport interface FineTuneEvent {\n  created_at: number;\n\n  level: string;\n\n  message: string;\n\n  object: string;\n}\n\nexport interface FineTuneEventsListResponse {\n  data: Array<FineTuneEvent>;\n\n  object: string;\n}\n\nexport interface FineTuneCreateParams {\n  /**\n   * The ID of an uploaded file that contains training data.\n   *\n   * See [upload file](https://platform.openai.com/docs/api-reference/files/upload)\n   * for how to upload a file.\n   *\n   * Your dataset must be formatted as a JSONL file, where each training example is a\n   * JSON object with the keys \"prompt\" and \"completion\". Additionally, you must\n   * upload your file with the purpose `fine-tune`.\n   *\n   * See the\n   * [fine-tuning guide](https://platform.openai.com/docs/guides/legacy-fine-tuning/creating-training-data)\n   * for more details.\n   */\n  training_file: string;\n\n  /**\n   * The batch size to use for training. The batch size is the number of training\n   * examples used to train a single forward and backward pass.\n   *\n   * By default, the batch size will be dynamically configured to be ~0.2% of the\n   * number of examples in the training set, capped at 256 - in general, we've found\n   * that larger batch sizes tend to work better for larger datasets.\n   */\n  batch_size?: number | null;\n\n  /**\n   * If this is provided, we calculate F-beta scores at the specified beta values.\n   * The F-beta score is a generalization of F-1 score. This is only used for binary\n   * classification.\n   *\n   * With a beta of 1 (i.e. the F-1 score), precision and recall are given the same\n   * weight. A larger beta score puts more weight on recall and less on precision. A\n   * smaller beta score puts more weight on precision and less on recall.\n   */\n  classification_betas?: Array<number> | null;\n\n  /**\n   * The number of classes in a classification task.\n   *\n   * This parameter is required for multiclass classification.\n   */\n  classification_n_classes?: number | null;\n\n  /**\n   * The positive class in binary classification.\n   *\n   * This parameter is needed to generate precision, recall, and F1 metrics when\n   * doing binary classification.\n   */\n  classification_positive_class?: string | null;\n\n  /**\n   * If set, we calculate classification-specific metrics such as accuracy and F-1\n   * score using the validation set at the end of every epoch. These metrics can be\n   * viewed in the\n   * [results file](https://platform.openai.com/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model).\n   *\n   * In order to compute classification metrics, you must provide a\n   * `validation_file`. Additionally, you must specify `classification_n_classes` for\n   * multiclass classification or `classification_positive_class` for binary\n   * classification.\n   */\n  compute_classification_metrics?: boolean | null;\n\n  /**\n   * The learning rate multiplier to use for training. The fine-tuning learning rate\n   * is the original learning rate used for pretraining multiplied by this value.\n   *\n   * By default, the learning rate multiplier is the 0.05, 0.1, or 0.2 depending on\n   * final `batch_size` (larger learning rates tend to perform better with larger\n   * batch sizes). We recommend experimenting with values in the range 0.02 to 0.2 to\n   * see what produces the best results.\n   */\n  learning_rate_multiplier?: number | null;\n\n  /**\n   * The name of the base model to fine-tune. You can select one of \"ada\", \"babbage\",\n   * \"curie\", \"davinci\", or a fine-tuned model created after 2022-04-21 and before\n   * 2023-08-22. To learn more about these models, see the\n   * [Models](https://platform.openai.com/docs/models) documentation.\n   */\n  model?: (string & {}) | 'ada' | 'babbage' | 'curie' | 'davinci' | null;\n\n  /**\n   * The number of epochs to train the model for. An epoch refers to one full cycle\n   * through the training dataset.\n   */\n  n_epochs?: number | null;\n\n  /**\n   * The weight to use for loss on the prompt tokens. This controls how much the\n   * model tries to learn to generate the prompt (as compared to the completion which\n   * always has a weight of 1.0), and can add a stabilizing effect to training when\n   * completions are short.\n   *\n   * If prompts are extremely long (relative to completions), it may make sense to\n   * reduce this weight so as to avoid over-prioritizing learning the prompt.\n   */\n  prompt_loss_weight?: number | null;\n\n  /**\n   * A string of up to 40 characters that will be added to your fine-tuned model\n   * name.\n   *\n   * For example, a `suffix` of \"custom-model-name\" would produce a model name like\n   * `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`.\n   */\n  suffix?: string | null;\n\n  /**\n   * The ID of an uploaded file that contains validation data.\n   *\n   * If you provide this file, the data is used to generate validation metrics\n   * periodically during fine-tuning. These metrics can be viewed in the\n   * [fine-tuning results file](https://platform.openai.com/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model).\n   * Your train and validation data should be mutually exclusive.\n   *\n   * Your dataset must be formatted as a JSONL file, where each validation example is\n   * a JSON object with the keys \"prompt\" and \"completion\". Additionally, you must\n   * upload your file with the purpose `fine-tune`.\n   *\n   * See the\n   * [fine-tuning guide](https://platform.openai.com/docs/guides/legacy-fine-tuning/creating-training-data)\n   * for more details.\n   */\n  validation_file?: string | null;\n}\n\nexport type FineTuneListEventsParams =\n  | FineTuneListEventsParamsNonStreaming\n  | FineTuneListEventsParamsStreaming;\n\nexport interface FineTuneListEventsParamsBase {\n  /**\n   * Whether to stream events for the fine-tune job. If set to true, events will be\n   * sent as data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available. The stream will terminate with a `data: [DONE]`\n   * message when the job is finished (succeeded, cancelled, or failed).\n   *\n   * If set to false, only events generated so far will be returned.\n   */\n  stream?: boolean;\n}\n\nexport namespace FineTuneListEventsParams {\n  export type FineTuneListEventsParamsNonStreaming = API.FineTuneListEventsParamsNonStreaming;\n  export type FineTuneListEventsParamsStreaming = API.FineTuneListEventsParamsStreaming;\n}\n\nexport interface FineTuneListEventsParamsNonStreaming extends FineTuneListEventsParamsBase {\n  /**\n   * Whether to stream events for the fine-tune job. If set to true, events will be\n   * sent as data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available. The stream will terminate with a `data: [DONE]`\n   * message when the job is finished (succeeded, cancelled, or failed).\n   *\n   * If set to false, only events generated so far will be returned.\n   */\n  stream?: false;\n}\n\nexport interface FineTuneListEventsParamsStreaming extends FineTuneListEventsParamsBase {\n  /**\n   * Whether to stream events for the fine-tune job. If set to true, events will be\n   * sent as data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available. The stream will terminate with a `data: [DONE]`\n   * message when the job is finished (succeeded, cancelled, or failed).\n   *\n   * If set to false, only events generated so far will be returned.\n   */\n  stream: true;\n}\n\nexport namespace FineTunes {\n  export import FineTune = API.FineTune;\n  export import FineTuneEvent = API.FineTuneEvent;\n  export import FineTuneEventsListResponse = API.FineTuneEventsListResponse;\n  export type FineTunesPage = _FineTunesPage;\n  export import FineTuneCreateParams = API.FineTuneCreateParams;\n  export import FineTuneListEventsParams = API.FineTuneListEventsParams;\n  export import FineTuneListEventsParamsNonStreaming = API.FineTuneListEventsParamsNonStreaming;\n  export import FineTuneListEventsParamsStreaming = API.FineTuneListEventsParamsStreaming;\n}\n","// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from './core';\nimport * as Pagination from './pagination';\nimport * as API from './resources/index';\nimport * as Errors from './error';\nimport { type Agent } from './_shims/index';\nimport * as Uploads from './uploads';\n\nexport interface ClientOptions {\n  /**\n   * Defaults to process.env[\"OPENAI_API_KEY\"].\n   */\n  apiKey?: string;\n\n  /**\n   * Override the default base URL for the API, e.g., \"https://api.example.com/v2/\"\n   */\n  baseURL?: string;\n\n  /**\n   * The maximum amount of time (in milliseconds) that the client should wait for a response\n   * from the server before timing out a single request.\n   *\n   * Note that request timeouts are retried by default, so in a worst-case scenario you may wait\n   * much longer than this timeout before the promise succeeds or fails.\n   */\n  timeout?: number;\n\n  /**\n   * An HTTP agent used to manage HTTP(S) connections.\n   *\n   * If not provided, an agent will be constructed by default in the Node.js environment,\n   * otherwise no agent is used.\n   */\n  httpAgent?: Agent;\n\n  /**\n   * Specify a custom `fetch` function implementation.\n   *\n   * If not provided, we use `node-fetch` on Node.js and otherwise expect that `fetch` is\n   * defined globally.\n   */\n  fetch?: Core.Fetch | undefined;\n\n  /**\n   * The maximum number of times that the client will retry a request in case of a\n   * temporary failure, like a network error or a 5XX error from the server.\n   *\n   * @default 2\n   */\n  maxRetries?: number;\n\n  /**\n   * Default headers to include with every request to the API.\n   *\n   * These can be removed in individual requests by explicitly setting the\n   * header to `undefined` or `null` in request options.\n   */\n  defaultHeaders?: Core.Headers;\n\n  /**\n   * Default query parameters to include with every request to the API.\n   *\n   * These can be removed in individual requests by explicitly setting the\n   * param to `undefined` in request options.\n   */\n  defaultQuery?: Core.DefaultQuery;\n\n  /**\n   * By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n   * Only set this option to `true` if you understand the risks and have appropriate mitigations in place.\n   */\n  dangerouslyAllowBrowser?: boolean;\n\n  organization?: string | null;\n}\n\n/** API Client for interfacing with the OpenAI API. */\nexport class OpenAI extends Core.APIClient {\n  apiKey: string;\n  organization?: string | null;\n\n  private _options: ClientOptions;\n\n  /**\n   * API Client for interfacing with the OpenAI API.\n   *\n   * @param {string} [opts.apiKey=process.env['OPENAI_API_KEY']] - The API Key to send to the API.\n   * @param {string} [opts.baseURL] - Override the default base URL for the API.\n   * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n   * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n   * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n   * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n   * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n   * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n   * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n   * @param {string | null} [opts.organization]\n   */\n  constructor({\n    apiKey = Core.readEnv('OPENAI_API_KEY'),\n    organization = Core.readEnv('OPENAI_ORG_ID') ?? null,\n    ...opts\n  }: ClientOptions = {}) {\n    if (apiKey === undefined) {\n      throw new Errors.OpenAIError(\n        \"The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'my apiKey' }).\",\n      );\n    }\n\n    const options: ClientOptions = {\n      apiKey,\n      organization,\n      ...opts,\n      baseURL: opts.baseURL ?? `https://api.openai.com/v1`,\n    };\n\n    if (!options.dangerouslyAllowBrowser && Core.isRunningInBrowser()) {\n      throw new Errors.OpenAIError(\n        \"It looks like you're running in a browser-like environment.\\n\\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\\nIf you understand the risks and have appropriate mitigations in place,\\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\\n\\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\\n\\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\\n\",\n      );\n    }\n\n    super({\n      baseURL: options.baseURL!,\n      timeout: options.timeout ?? 600000 /* 10 minutes */,\n      httpAgent: options.httpAgent,\n      maxRetries: options.maxRetries,\n      fetch: options.fetch,\n    });\n    this._options = options;\n\n    this.apiKey = apiKey;\n    this.organization = organization;\n  }\n\n  completions: API.Completions = new API.Completions(this);\n  chat: API.Chat = new API.Chat(this);\n  edits: API.Edits = new API.Edits(this);\n  embeddings: API.Embeddings = new API.Embeddings(this);\n  files: API.Files = new API.Files(this);\n  images: API.Images = new API.Images(this);\n  audio: API.Audio = new API.Audio(this);\n  moderations: API.Moderations = new API.Moderations(this);\n  models: API.Models = new API.Models(this);\n  fineTuning: API.FineTuning = new API.FineTuning(this);\n  fineTunes: API.FineTunes = new API.FineTunes(this);\n\n  protected override defaultQuery(): Core.DefaultQuery | undefined {\n    return this._options.defaultQuery;\n  }\n\n  protected override defaultHeaders(opts: Core.FinalRequestOptions): Core.Headers {\n    return {\n      ...super.defaultHeaders(opts),\n      'OpenAI-Organization': this.organization,\n      ...this._options.defaultHeaders,\n    };\n  }\n\n  protected override authHeaders(opts: Core.FinalRequestOptions): Core.Headers {\n    return { Authorization: `Bearer ${this.apiKey}` };\n  }\n\n  static OpenAI = this;\n\n  static OpenAIError = Errors.OpenAIError;\n  static APIError = Errors.APIError;\n  static APIConnectionError = Errors.APIConnectionError;\n  static APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;\n  static APIUserAbortError = Errors.APIUserAbortError;\n  static NotFoundError = Errors.NotFoundError;\n  static ConflictError = Errors.ConflictError;\n  static RateLimitError = Errors.RateLimitError;\n  static BadRequestError = Errors.BadRequestError;\n  static AuthenticationError = Errors.AuthenticationError;\n  static InternalServerError = Errors.InternalServerError;\n  static PermissionDeniedError = Errors.PermissionDeniedError;\n  static UnprocessableEntityError = Errors.UnprocessableEntityError;\n}\n\nexport const {\n  OpenAIError,\n  APIError,\n  APIConnectionError,\n  APIConnectionTimeoutError,\n  APIUserAbortError,\n  NotFoundError,\n  ConflictError,\n  RateLimitError,\n  BadRequestError,\n  AuthenticationError,\n  InternalServerError,\n  PermissionDeniedError,\n  UnprocessableEntityError,\n} = Errors;\n\nexport import toFile = Uploads.toFile;\nexport import fileFromPath = Uploads.fileFromPath;\n\nexport namespace OpenAI {\n  // Helper functions\n  export import toFile = Uploads.toFile;\n  export import fileFromPath = Uploads.fileFromPath;\n\n  export import RequestOptions = Core.RequestOptions;\n\n  export import Page = Pagination.Page;\n  export import PageResponse = Pagination.PageResponse;\n\n  export import CursorPage = Pagination.CursorPage;\n  export import CursorPageParams = Pagination.CursorPageParams;\n  export import CursorPageResponse = Pagination.CursorPageResponse;\n\n  export import Completions = API.Completions;\n  export import Completion = API.Completion;\n  export import CompletionChoice = API.CompletionChoice;\n  export import CompletionUsage = API.CompletionUsage;\n  export import CompletionCreateParams = API.CompletionCreateParams;\n  export import CompletionCreateParamsNonStreaming = API.CompletionCreateParamsNonStreaming;\n  export import CompletionCreateParamsStreaming = API.CompletionCreateParamsStreaming;\n\n  export import Chat = API.Chat;\n\n  export import Edits = API.Edits;\n  export import Edit = API.Edit;\n  export import EditCreateParams = API.EditCreateParams;\n\n  export import Embeddings = API.Embeddings;\n  export import CreateEmbeddingResponse = API.CreateEmbeddingResponse;\n  export import Embedding = API.Embedding;\n  export import EmbeddingCreateParams = API.EmbeddingCreateParams;\n\n  export import Files = API.Files;\n  export import FileContent = API.FileContent;\n  export import FileDeleted = API.FileDeleted;\n  export import FileObject = API.FileObject;\n  export import FileObjectsPage = API.FileObjectsPage;\n  export import FileCreateParams = API.FileCreateParams;\n\n  export import Images = API.Images;\n  export import Image = API.Image;\n  export import ImagesResponse = API.ImagesResponse;\n  export import ImageCreateVariationParams = API.ImageCreateVariationParams;\n  export import ImageEditParams = API.ImageEditParams;\n  export import ImageGenerateParams = API.ImageGenerateParams;\n\n  export import Audio = API.Audio;\n\n  export import Moderations = API.Moderations;\n  export import Moderation = API.Moderation;\n  export import ModerationCreateResponse = API.ModerationCreateResponse;\n  export import ModerationCreateParams = API.ModerationCreateParams;\n\n  export import Models = API.Models;\n  export import Model = API.Model;\n  export import ModelDeleted = API.ModelDeleted;\n  export import ModelsPage = API.ModelsPage;\n\n  export import FineTuning = API.FineTuning;\n\n  export import FineTunes = API.FineTunes;\n  export import FineTune = API.FineTune;\n  export import FineTuneEvent = API.FineTuneEvent;\n  export import FineTuneEventsListResponse = API.FineTuneEventsListResponse;\n  export import FineTunesPage = API.FineTunesPage;\n  export import FineTuneCreateParams = API.FineTuneCreateParams;\n  export import FineTuneListEventsParams = API.FineTuneListEventsParams;\n  export import FineTuneListEventsParamsNonStreaming = API.FineTuneListEventsParamsNonStreaming;\n  export import FineTuneListEventsParamsStreaming = API.FineTuneListEventsParamsStreaming;\n}\n\nexport default OpenAI;\n"],"names":["_get","Reflect","get","bind","target","property","receiver","base","object","Object","prototype","hasOwnProperty","call","getPrototypeOf","desc","getOwnPropertyDescriptor","arguments","length","value","apply","this","_asyncIterator","r","n","t","o","e","Symbol","asyncIterator","iterator","AsyncFromSyncIterator","TypeError","AsyncFromSyncIteratorContinuation","Promise","reject","done","resolve","then","s","next","_OverloadYield","v","k","_awaitAsyncGenerator","AsyncGenerator","resume","u","i","settle","key","arg","_invoke","_wrapAsyncGenerator","fn","VERSION","OpenAIError","_Error","_inherits","_super","_createSuper","_classCallCheck","_createClass","_wrapNativeSuper","Error","APIError","_OpenAIError","_super2","status","error","message","headers","_this","concat","makeMessage","data","code","param","type","JSON","stringify","errorResponse","APIConnectionError","cause","castToError","BadRequestError","AuthenticationError","PermissionDeniedError","NotFoundError","ConflictError","UnprocessableEntityError","RateLimitError","InternalServerError","APIUserAbortError","_APIError","_super3","_this2","undefined","_APIError2","_super4","_ref2","_this3","APIConnectionTimeoutError","_APIConnectionError","_super5","_APIError3","_super6","_this4","_APIError4","_super7","_this5","_APIError5","_super8","_this6","_APIError6","_super9","_this7","_APIError7","_super10","_this8","_APIError8","_super11","_this9","_APIError9","_super12","_this10","_APIError10","_super13","Stream","_Symbol$asyncIterator","response","controller","decoder","SSEDecoder","_regeneratorRuntime","mark","_callee","lineDecoder","iter","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","chunk","_iterator3","_step3","line","sse","_iterator4","_step4","_line","_sse","wrap","_context","prev","body","abort","LineDecoder","readableStreamAsyncIterable","sent","_createForOfIteratorHelper","decode","t0","f","finish","t1","return","flush","t2","stop","_callee2","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_context2","iterMessages","abrupt","startsWith","event","parse","console","raw","name","chunks","endsWith","substring","join","push","_partition","str","delimiter","index","indexOf","partition","_partition2","_slicedToArray","fieldname","buffer","trailingCR","text","decodeText","slice","trailingNewline","NEWLINE_CHARS","has","lines","split","NEWLINE_REGEXP","_toConsumableArray","pop","bytes","Buffer","toString","Uint8Array","from","constructor","TextDecoder","ArrayBuffer","_a","textDecoder","stream","reader","getReader","_defineProperty","_asyncToGenerator","_callee3","result","_context3","read","releaseLock","_callee4","cancelPromise","_context4","cancel","Set","auto","kind","fetch","FormData","File","getMultipartRequestOptions","getDefaultAgent","fileFromPath","isFsReadStream","MultipartBody","_Symbol$toStringTag","toStringTag","shims","options","Request","Response","Headers","Blob","_getMultipartRequestOptions","_fetch","_Request","_Response","_Headers","recommendation","manuallyImported","_x","_x2","form","opts","_objectSpread","url","isResponseLike","blob","isBlobLike","size","arrayBuffer","isUploadable","lastModified","isFileLike","toFile","_toFile","_b","_c","bits","_args","URL","pathname","getBytes","getName","_x3","_getBytes","parts","isView","isAsyncIterableIterator","propsForError","props","getOwnPropertyNames","map","p","getStringFromMaybeBuffer","filename","path","x","String","isMultipartBody","multipartFormRequestOptions","_x5","createForm","_x6","_ref3","_callee5","_context5","all","entries","_ref4","_ref5","addFormValue","_x7","_x8","_x9","_ref6","_callee6","file","_context6","append","Array","isArray","entry","_ref7","_ref8","prop","defaultParseResponse","_defaultParseResponse","contentType","json","includes","debug","APIPromise","_Promise","_withResponse","responsePromise","parseResponse","transform","_ref","_yield$Promise$all","_yield$Promise$all2","asResponse","parsedPromise","onfulfilled","onrejected","catch","onfinally","finally","APIClient","_prepareRequest","_makeRequest","_fetchWithTimeout","_retryRequest","baseURL","maxRetries","_ref2$timeout","timeout","httpAgent","overridenFetch","validatePositiveInteger","Accept","getUserAgent","getPlatformHeaders","authHeaders","customHeaders","uuid4","methodRequest","method","request","Page","requestAPIList","byteLength","TextEncoder","encode","query","_options$headers","contentLength","calculateContentLength","buildURL","minAgentTimeout","_d","_e","idempotencyHeader","idempotencyKey","defaultIdempotencyKey","reqHeaders","defaultHeaders","shimsKind","keys","forEach","req","agent","signal","_f","validateHeaders","_x4","fromEntries","header","generate","remainingRetries","makeRequest","optionsInput","retriesRemaining","_this$buildRequest","responseHeaders","errText","errJSON","errMessage","buildRequest","prepareRequest","aborted","AbortController","fetchWithTimeout","retryRequest","createResponseHeaders","ok","shouldRetry","safeJSON","makeStatusError","PagePromise","isAbsoluteURL","defaultQuery","isEmptyObj","search","stringifyQuery","filter","encodeURIComponent","_x10","init","ms","_objectWithoutProperties","_excluded","addEventListener","setTimeout","getRequestClient","clearTimeout","shouldRetryHeader","_x11","_x12","_x13","_callee7","timeoutMillis","retryAfterHeader","timeoutSeconds","_context7","parseInt","Number","isNaN","Date","now","isInteger","calculateDefaultRetryTimeoutMillis","sleep","numRetries","Math","min","pow","random","AbstractPage","_ref9","_getNextPage","client","_AbstractPage_client","set","__classPrivateFieldSet","getPaginatedItems","nextPageInfo","_callee8","nextInfo","nextOptions","params","_step3$value","_context8","searchParams","err","__classPrivateFieldGet","_callee9","page","_context9","hasNextPage","getNextPage","_callee10","item","_context10","iterPages","WeakMap","_APIPromise","_ref10","_x14","_callee11","_context11","t3","t4","_callee12","_context12","Proxy","toLowerCase","requestOptionsKeys","isRequestOptions","obj","every","hasOwn","getPlatformProperties","Deno","build","normalizePlatform","os","normalizeArch","arch","version","EdgeRuntime","process","platform","browserInfo","navigator","_i","_browserPatterns","pattern","_browserPatterns$_i","match","exec","userAgent","major","minor","patch","browser","getBrowserInfo","_platformHeaders","startsWithSchemeRegexp","RegExp","test","readEnv","env","_k","action","_console","_len","args","_key","log","replace","c","_AbstractPage","CursorPage","_AbstractPage2","info","id","after","APIResource","post","put","delete","getAPIList","Completions","_APIResource","Chat","completions","API","Edits","Embeddings","Files","_waitForProcessing","fileId","FileObjectsPage","_ref$pollInterval","pollInterval","_ref$maxWait","maxWait","TERMINAL_STATES","start","retrieve","_Page","Images","Transcriptions","Translations","Audio","transcriptions","translations","Moderations","Models","model","ModelsPage","Jobs","fineTuningJobId","list","FineTuningJobsPage","listEvents","FineTuningJobEventsPage","_CursorPage","_CursorPage2","FineTuning","jobs","FineTunes","fineTuneId","FineTunesPage","OpenAI","_Core$APIClient","_ref$apiKey","apiKey","Core","_ref$organization","organization","Errors","dangerouslyAllowBrowser","window","document","_assertThisInitialized","chat","edits","embeddings","files","images","audio","moderations","models","fineTuning","fineTunes","_options","_getPrototypeOf","Authorization","Uploads","Pagination"],"sourceRoot":""}